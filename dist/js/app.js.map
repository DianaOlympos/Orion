{
  "version": 3,
  "sources": ["../../assets/node_modules/topbar/topbar.min.js", "../../assets/js/app.js", "../../assets/node_modules/uplot/dist/uPlot.esm.js", "../../assets/js/chart.js"],
  "sourcesContent": ["/**\n * @license MIT\n * topbar 2.0.0, 2023-02-04\n * http://buunguyen.github.io/topbar\n * Copyright (c) 2021 Buu Nguyen\n */\n(function(window,document){\"use strict\";function repaint(){canvas.width=window.innerWidth,canvas.height=5*options.barThickness;var ctx=canvas.getContext(\"2d\");ctx.shadowBlur=options.shadowBlur,ctx.shadowColor=options.shadowColor;var stop,lineGradient=ctx.createLinearGradient(0,0,canvas.width,0);for(stop in options.barColors)lineGradient.addColorStop(stop,options.barColors[stop]);ctx.lineWidth=options.barThickness,ctx.beginPath(),ctx.moveTo(0,options.barThickness/2),ctx.lineTo(Math.ceil(currentProgress*canvas.width),options.barThickness/2),ctx.strokeStyle=lineGradient,ctx.stroke()}var canvas,currentProgress,showing,progressTimerId=null,fadeTimerId=null,delayTimerId=null,options={autoRun:!0,barThickness:3,barColors:{0:\"rgba(26,  188, 156, .9)\",\".25\":\"rgba(52,  152, 219, .9)\",\".50\":\"rgba(241, 196, 15,  .9)\",\".75\":\"rgba(230, 126, 34,  .9)\",\"1.0\":\"rgba(211, 84,  0,   .9)\"},shadowBlur:10,shadowColor:\"rgba(0,   0,   0,   .6)\",className:null},topbar={config:function(opts){for(var key in opts)options.hasOwnProperty(key)&&(options[key]=opts[key])},show:function(handler){var type,elem;showing||(handler?delayTimerId=delayTimerId||setTimeout(()=>topbar.show(),handler):(showing=!0,null!==fadeTimerId&&window.cancelAnimationFrame(fadeTimerId),canvas||((elem=(canvas=document.createElement(\"canvas\")).style).position=\"fixed\",elem.top=elem.left=elem.right=elem.margin=elem.padding=0,elem.zIndex=100001,elem.display=\"none\",options.className&&canvas.classList.add(options.className),document.body.appendChild(canvas),type=\"resize\",handler=repaint,(elem=window).addEventListener?elem.addEventListener(type,handler,!1):elem.attachEvent?elem.attachEvent(\"on\"+type,handler):elem[\"on\"+type]=handler),canvas.style.opacity=1,canvas.style.display=\"block\",topbar.progress(0),options.autoRun&&function loop(){progressTimerId=window.requestAnimationFrame(loop),topbar.progress(\"+\"+.05*Math.pow(1-Math.sqrt(currentProgress),2))}()))},progress:function(to){return void 0===to||(\"string\"==typeof to&&(to=(0<=to.indexOf(\"+\")||0<=to.indexOf(\"-\")?currentProgress:0)+parseFloat(to)),currentProgress=1<to?1:to,repaint()),currentProgress},hide:function(){clearTimeout(delayTimerId),delayTimerId=null,showing&&(showing=!1,null!=progressTimerId&&(window.cancelAnimationFrame(progressTimerId),progressTimerId=null),function loop(){return 1<=topbar.progress(\"+.1\")&&(canvas.style.opacity-=.05,canvas.style.opacity<=.05)?(canvas.style.display=\"none\",void(fadeTimerId=null)):void(fadeTimerId=window.requestAnimationFrame(loop))}())}};\"object\"==typeof module&&\"object\"==typeof module.exports?module.exports=topbar:\"function\"==typeof define&&define.amd?define(function(){return topbar}):this.topbar=topbar}).call(this,window,document);", "import topbar from \"topbar\"\nimport { ChartData } from \"./chart.js\"\n\nlet socketPath = document.querySelector(\"html\").getAttribute(\"phx-socket\") || \"/live\"\nlet csrfToken = document.querySelector(\"meta[name='csrf-token']\").getAttribute(\"content\")\n\nlet Hooks = {\n  ChartData: ChartData\n}\n\nlet liveSocket = new LiveView.LiveSocket(socketPath, Phoenix.Socket, { hooks: Hooks, params: { _csrf_token: csrfToken } })\n\n// Show progress bar on live navigation and form submits\ntopbar.config({ barColors: { 0: \"#29d\" }, shadowColor: \"rgba(0, 0, 0, .3)\" })\nwindow.addEventListener(\"phx:page-loading-start\", info => topbar.show())\nwindow.addEventListener(\"phx:page-loading-stop\", info => topbar.hide())\n\n// connect if there are any LiveViews on the page\nliveSocket.connect()\n\n// expose liveSocket on window for web console debug logs and latency simulation:\n// >> liveSocket.enableDebug()\n// >> liveSocket.enableLatencySim(1000)  // enabled for duration of browser session\n// >> liveSocket.disableLatencySim()\nwindow.liveSocket = liveSocket\n\n", "/**\n* Copyright (c) 2023, Leon Sorokin\n* All rights reserved. (MIT Licensed)\n*\n* uPlot.js (\u03BCPlot)\n* A small, fast chart for time series, lines, areas, ohlc & bars\n* https://github.com/leeoniya/uPlot (v1.6.24)\n*/\n\nconst FEAT_TIME          = true;\n\nconst pre = \"u-\";\n\nconst UPLOT          =       \"uplot\";\nconst ORI_HZ         = pre + \"hz\";\nconst ORI_VT         = pre + \"vt\";\nconst TITLE          = pre + \"title\";\nconst WRAP           = pre + \"wrap\";\nconst UNDER          = pre + \"under\";\nconst OVER           = pre + \"over\";\nconst AXIS           = pre + \"axis\";\nconst OFF            = pre + \"off\";\nconst SELECT         = pre + \"select\";\nconst CURSOR_X       = pre + \"cursor-x\";\nconst CURSOR_Y       = pre + \"cursor-y\";\nconst CURSOR_PT      = pre + \"cursor-pt\";\nconst LEGEND         = pre + \"legend\";\nconst LEGEND_LIVE    = pre + \"live\";\nconst LEGEND_INLINE  = pre + \"inline\";\nconst LEGEND_THEAD   = pre + \"thead\";\nconst LEGEND_SERIES  = pre + \"series\";\nconst LEGEND_MARKER  = pre + \"marker\";\nconst LEGEND_LABEL   = pre + \"label\";\nconst LEGEND_VALUE   = pre + \"value\";\n\nconst WIDTH       = \"width\";\nconst HEIGHT      = \"height\";\nconst TOP         = \"top\";\nconst BOTTOM      = \"bottom\";\nconst LEFT        = \"left\";\nconst RIGHT       = \"right\";\nconst hexBlack    = \"#000\";\nconst transparent = hexBlack + \"0\";\n\nconst mousemove   = \"mousemove\";\nconst mousedown   = \"mousedown\";\nconst mouseup     = \"mouseup\";\nconst mouseenter  = \"mouseenter\";\nconst mouseleave  = \"mouseleave\";\nconst dblclick    = \"dblclick\";\nconst resize      = \"resize\";\nconst scroll      = \"scroll\";\n\nconst change      = \"change\";\nconst dppxchange  = \"dppxchange\";\n\nconst LEGEND_DISP = \"--\";\n\nconst domEnv = typeof window != 'undefined';\n\nconst doc = domEnv ? document  : null;\nconst win = domEnv ? window    : null;\nconst nav = domEnv ? navigator : null;\n\nlet pxRatio;\n\n//export const canHover = domEnv && !win.matchMedia('(hover: none)').matches;\n\nlet query;\n\nfunction setPxRatio() {\n\tlet _pxRatio = devicePixelRatio;\n\n\t// during print preview, Chrome fires off these dppx queries even without changes\n\tif (pxRatio != _pxRatio) {\n\t\tpxRatio = _pxRatio;\n\n\t\tquery && off(change, query, setPxRatio);\n\t\tquery = matchMedia(`(min-resolution: ${pxRatio - 0.001}dppx) and (max-resolution: ${pxRatio + 0.001}dppx)`);\n\t\ton(change, query, setPxRatio);\n\n\t\twin.dispatchEvent(new CustomEvent(dppxchange));\n\t}\n}\n\nfunction addClass(el, c) {\n\tif (c != null) {\n\t\tlet cl = el.classList;\n\t\t!cl.contains(c) && cl.add(c);\n\t}\n}\n\nfunction remClass(el, c) {\n\tlet cl = el.classList;\n\tcl.contains(c) && cl.remove(c);\n}\n\nfunction setStylePx(el, name, value) {\n\tel.style[name] = value + \"px\";\n}\n\nfunction placeTag(tag, cls, targ, refEl) {\n\tlet el = doc.createElement(tag);\n\n\tif (cls != null)\n\t\taddClass(el, cls);\n\n\tif (targ != null)\n\t\ttarg.insertBefore(el, refEl);\n\n\treturn el;\n}\n\nfunction placeDiv(cls, targ) {\n\treturn placeTag(\"div\", cls, targ);\n}\n\nconst xformCache = new WeakMap();\n\nfunction elTrans(el, xPos, yPos, xMax, yMax) {\n\tlet xform = \"translate(\" + xPos + \"px,\" + yPos + \"px)\";\n\tlet xformOld = xformCache.get(el);\n\n\tif (xform != xformOld) {\n\t\tel.style.transform = xform;\n\t\txformCache.set(el, xform);\n\n\t\tif (xPos < 0 || yPos < 0 || xPos > xMax || yPos > yMax)\n\t\t\taddClass(el, OFF);\n\t\telse\n\t\t\tremClass(el, OFF);\n\t}\n}\n\nconst colorCache = new WeakMap();\n\nfunction elColor(el, background, borderColor) {\n\tlet newColor = background + borderColor;\n\tlet oldColor = colorCache.get(el);\n\n\tif (newColor != oldColor) {\n\t\tcolorCache.set(el, newColor);\n\t\tel.style.background = background;\n\t\tel.style.borderColor = borderColor;\n\t}\n}\n\nconst sizeCache = new WeakMap();\n\nfunction elSize(el, newWid, newHgt, centered) {\n\tlet newSize = newWid + \"\" + newHgt;\n\tlet oldSize = sizeCache.get(el);\n\n\tif (newSize != oldSize) {\n\t\tsizeCache.set(el, newSize);\n\t\tel.style.height = newHgt + \"px\";\n\t\tel.style.width = newWid + \"px\";\n\t\tel.style.marginLeft = centered ? -newWid/2 + \"px\" : 0;\n\t\tel.style.marginTop = centered ? -newHgt/2 + \"px\" : 0;\n\t}\n}\n\nconst evOpts = {passive: true};\nconst evOpts2 = {...evOpts, capture: true};\n\nfunction on(ev, el, cb, capt) {\n\tel.addEventListener(ev, cb, capt ? evOpts2 : evOpts);\n}\n\nfunction off(ev, el, cb, capt) {\n\tel.removeEventListener(ev, cb, capt ? evOpts2 : evOpts);\n}\n\ndomEnv && setPxRatio();\n\n// binary search for index of closest value\nfunction closestIdx(num, arr, lo, hi) {\n\tlet mid;\n\tlo = lo || 0;\n\thi = hi || arr.length - 1;\n\tlet bitwise = hi <= 2147483647;\n\n\twhile (hi - lo > 1) {\n\t\tmid = bitwise ? (lo + hi) >> 1 : floor((lo + hi) / 2);\n\n\t\tif (arr[mid] < num)\n\t\t\tlo = mid;\n\t\telse\n\t\t\thi = mid;\n\t}\n\n\tif (num - arr[lo] <= arr[hi] - num)\n\t\treturn lo;\n\n\treturn hi;\n}\n\nfunction nonNullIdx(data, _i0, _i1, dir) {\n\tfor (let i = dir == 1 ? _i0 : _i1; i >= _i0 && i <= _i1; i += dir) {\n\t\tif (data[i] != null)\n\t\t\treturn i;\n\t}\n\n\treturn -1;\n}\n\nfunction getMinMax(data, _i0, _i1, sorted) {\n//\tconsole.log(\"getMinMax()\");\n\n\tlet _min = inf;\n\tlet _max = -inf;\n\n\tif (sorted == 1) {\n\t\t_min = data[_i0];\n\t\t_max = data[_i1];\n\t}\n\telse if (sorted == -1) {\n\t\t_min = data[_i1];\n\t\t_max = data[_i0];\n\t}\n\telse {\n\t\tfor (let i = _i0; i <= _i1; i++) {\n\t\t\tif (data[i] != null) {\n\t\t\t\t_min = min(_min, data[i]);\n\t\t\t\t_max = max(_max, data[i]);\n\t\t\t}\n\t\t}\n\t}\n\n\treturn [_min, _max];\n}\n\nfunction getMinMaxLog(data, _i0, _i1) {\n//\tconsole.log(\"getMinMax()\");\n\n\tlet _min = inf;\n\tlet _max = -inf;\n\n\tfor (let i = _i0; i <= _i1; i++) {\n\t\tif (data[i] > 0) {\n\t\t\t_min = min(_min, data[i]);\n\t\t\t_max = max(_max, data[i]);\n\t\t}\n\t}\n\n\treturn [\n\t\t_min ==  inf ?  1 : _min,\n\t\t_max == -inf ? 10 : _max,\n\t];\n}\n\nfunction rangeLog(min, max, base, fullMags) {\n\tlet minSign = sign(min);\n\tlet maxSign = sign(max);\n\n\tlet logFn = base == 10 ? log10 : log2;\n\n\tif (min == max) {\n\t\tif (minSign == -1) {\n\t\t\tmin *= base;\n\t\t\tmax /= base;\n\t\t}\n\t\telse {\n\t\t\tmin /= base;\n\t\t\tmax *= base;\n\t\t}\n\t}\n\n\tlet growMinAbs = minSign == 1 ? floor : ceil;\n\tlet growMaxAbs = maxSign == 1 ? ceil : floor;\n\n\tlet minExp = growMinAbs(logFn(abs(min)));\n\tlet maxExp = growMaxAbs(logFn(abs(max)));\n\n\tlet minIncr = pow(base, minExp);\n\tlet maxIncr = pow(base, maxExp);\n\n\t// fix values like Math.pow(10, -5) === 0.000009999999999999999\n\tif (base == 10) {\n\t\tif (minExp < 0)\n\t\t\tminIncr = roundDec(minIncr, -minExp);\n\t\tif (maxExp < 0)\n\t\t\tmaxIncr = roundDec(maxIncr, -maxExp);\n\t}\n\n\tif (fullMags || base == 2) {\n\t\tmin = minIncr * minSign;\n\t\tmax = maxIncr * maxSign;\n\t}\n\telse {\n\t\tmin = incrRoundDn(min, minIncr);\n\t\tmax = incrRoundUp(max, maxIncr);\n\t}\n\n\treturn [min, max];\n}\n\nfunction rangeAsinh(min, max, base, fullMags) {\n\tlet minMax = rangeLog(min, max, base, fullMags);\n\n\tif (min == 0)\n\t\tminMax[0] = 0;\n\n\tif (max == 0)\n\t\tminMax[1] = 0;\n\n\treturn minMax;\n}\n\nconst rangePad = 0.1;\n\nconst autoRangePart = {\n\tmode: 3,\n\tpad: rangePad,\n};\n\nconst _eqRangePart = {\n\tpad:  0,\n\tsoft: null,\n\tmode: 0,\n};\n\nconst _eqRange = {\n\tmin: _eqRangePart,\n\tmax: _eqRangePart,\n};\n\n// this ensures that non-temporal/numeric y-axes get multiple-snapped padding added above/below\n// TODO: also account for incrs when snapping to ensure top of axis gets a tick & value\nfunction rangeNum(_min, _max, mult, extra) {\n\tif (isObj(mult))\n\t\treturn _rangeNum(_min, _max, mult);\n\n\t_eqRangePart.pad  = mult;\n\t_eqRangePart.soft = extra ? 0 : null;\n\t_eqRangePart.mode = extra ? 3 : 0;\n\n\treturn _rangeNum(_min, _max, _eqRange);\n}\n\n// nullish coalesce\nfunction ifNull(lh, rh) {\n\treturn lh == null ? rh : lh;\n}\n\n// checks if given index range in an array contains a non-null value\n// aka a range-bounded Array.some()\nfunction hasData(data, idx0, idx1) {\n\tidx0 = ifNull(idx0, 0);\n\tidx1 = ifNull(idx1, data.length - 1);\n\n\twhile (idx0 <= idx1) {\n\t\tif (data[idx0] != null)\n\t\t\treturn true;\n\t\tidx0++;\n\t}\n\n\treturn false;\n}\n\nfunction _rangeNum(_min, _max, cfg) {\n\tlet cmin = cfg.min;\n\tlet cmax = cfg.max;\n\n\tlet padMin = ifNull(cmin.pad, 0);\n\tlet padMax = ifNull(cmax.pad, 0);\n\n\tlet hardMin = ifNull(cmin.hard, -inf);\n\tlet hardMax = ifNull(cmax.hard,  inf);\n\n\tlet softMin = ifNull(cmin.soft,  inf);\n\tlet softMax = ifNull(cmax.soft, -inf);\n\n\tlet softMinMode = ifNull(cmin.mode, 0);\n\tlet softMaxMode = ifNull(cmax.mode, 0);\n\n\tlet delta = _max - _min;\n\tlet deltaMag = log10(delta);\n\n\tlet scalarMax = max(abs(_min), abs(_max));\n\tlet scalarMag = log10(scalarMax);\n\n\tlet scalarMagDelta = abs(scalarMag - deltaMag);\n\n\t// this handles situations like 89.7, 89.69999999999999\n\t// by assuming 0.001x deltas are precision errors\n//\tif (delta > 0 && delta < abs(_max) / 1e3)\n//\t\tdelta = 0;\n\n\t// treat data as flat if delta is less than 1 billionth\n\t// or range is 11+ orders of magnitude below raw values, e.g. 99999999.99999996 - 100000000.00000004\n\tif (delta < 1e-9 || scalarMagDelta > 10) {\n\t\tdelta = 0;\n\n\t\t// if soft mode is 2 and all vals are flat at 0, avoid the 0.1 * 1e3 fallback\n\t\t// this prevents 0,0,0 from ranging to -100,100 when softMin/softMax are -1,1\n\t\tif (_min == 0 || _max == 0) {\n\t\t\tdelta = 1e-9;\n\n\t\t\tif (softMinMode == 2 && softMin != inf)\n\t\t\t\tpadMin = 0;\n\n\t\t\tif (softMaxMode == 2 && softMax != -inf)\n\t\t\t\tpadMax = 0;\n\t\t}\n\t}\n\n\tlet nonZeroDelta = delta || scalarMax || 1e3;\n\tlet mag          = log10(nonZeroDelta);\n\tlet base         = pow(10, floor(mag));\n\n\tlet _padMin  = nonZeroDelta * (delta == 0 ? (_min == 0 ? .1 : 1) : padMin);\n\tlet _newMin  = roundDec(incrRoundDn(_min - _padMin, base/10), 9);\n\tlet _softMin = _min >= softMin && (softMinMode == 1 || softMinMode == 3 && _newMin <= softMin || softMinMode == 2 && _newMin >= softMin) ? softMin : inf;\n\tlet minLim   = max(hardMin, _newMin < _softMin && _min >= _softMin ? _softMin : min(_softMin, _newMin));\n\n\tlet _padMax  = nonZeroDelta * (delta == 0 ? (_max == 0 ? .1 : 1) : padMax);\n\tlet _newMax  = roundDec(incrRoundUp(_max + _padMax, base/10), 9);\n\tlet _softMax = _max <= softMax && (softMaxMode == 1 || softMaxMode == 3 && _newMax >= softMax || softMaxMode == 2 && _newMax <= softMax) ? softMax : -inf;\n\tlet maxLim   = min(hardMax, _newMax > _softMax && _max <= _softMax ? _softMax : max(_softMax, _newMax));\n\n\tif (minLim == maxLim && minLim == 0)\n\t\tmaxLim = 100;\n\n\treturn [minLim, maxLim];\n}\n\n// alternative: https://stackoverflow.com/a/2254896\nconst numFormatter = new Intl.NumberFormat(domEnv ? nav.language : 'en-US');\nconst fmtNum = val => numFormatter.format(val);\n\nconst M = Math;\n\nconst PI = M.PI;\nconst abs = M.abs;\nconst floor = M.floor;\nconst round = M.round;\nconst ceil = M.ceil;\nconst min = M.min;\nconst max = M.max;\nconst pow = M.pow;\nconst sign = M.sign;\nconst log10 = M.log10;\nconst log2 = M.log2;\n// TODO: seems like this needs to match asinh impl if the passed v is tweaked?\nconst sinh =  (v, linthresh = 1) => M.sinh(v) * linthresh;\nconst asinh = (v, linthresh = 1) => M.asinh(v / linthresh);\n\nconst inf = Infinity;\n\nfunction numIntDigits(x) {\n\treturn (log10((x ^ (x >> 31)) - (x >> 31)) | 0) + 1;\n}\n\nfunction clamp(num, _min, _max) {\n\treturn min(max(num, _min), _max);\n}\n\nfunction fnOrSelf(v) {\n\treturn typeof v == \"function\" ? v : () => v;\n}\n\nconst noop = () => {};\n\nconst retArg0 = _0 => _0;\n\nconst retArg1 = (_0, _1) => _1;\n\nconst retNull = _ => null;\n\nconst retTrue = _ => true;\n\nconst retEq = (a, b) => a == b;\n\n// this will probably prevent tick incrs > 14 decimal places\n// (we generate up to 17 dec, see fixedDec const)\nconst fixFloat = v => roundDec(v, 14);\n\nfunction incrRound(num, incr) {\n\treturn fixFloat(roundDec(fixFloat(num/incr))*incr);\n}\n\nfunction incrRoundUp(num, incr) {\n\treturn fixFloat(ceil(fixFloat(num/incr))*incr);\n}\n\nfunction incrRoundDn(num, incr) {\n\treturn fixFloat(floor(fixFloat(num/incr))*incr);\n}\n\n// https://stackoverflow.com/a/48764436\n// rounds half away from zero\nfunction roundDec(val, dec = 0) {\n\tif (isInt(val))\n\t\treturn val;\n//\telse if (dec == 0)\n//\t\treturn round(val);\n\n\tlet p = 10 ** dec;\n\tlet n = (val * p) * (1 + Number.EPSILON);\n\treturn round(n) / p;\n}\n\nconst fixedDec = new Map();\n\nfunction guessDec(num) {\n\treturn ((\"\"+num).split(\".\")[1] || \"\").length;\n}\n\nfunction genIncrs(base, minExp, maxExp, mults) {\n\tlet incrs = [];\n\n\tlet multDec = mults.map(guessDec);\n\n\tfor (let exp = minExp; exp < maxExp; exp++) {\n\t\tlet expa = abs(exp);\n\t\tlet mag = roundDec(pow(base, exp), expa);\n\n\t\tfor (let i = 0; i < mults.length; i++) {\n\t\t\tlet _incr = mults[i] * mag;\n\t\t\tlet dec = (_incr >= 0 && exp >= 0 ? 0 : expa) + (exp >= multDec[i] ? 0 : multDec[i]);\n\t\t\tlet incr = roundDec(_incr, dec);\n\t\t\tincrs.push(incr);\n\t\t\tfixedDec.set(incr, dec);\n\t\t}\n\t}\n\n\treturn incrs;\n}\n\n//export const assign = Object.assign;\n\nconst EMPTY_OBJ = {};\nconst EMPTY_ARR = [];\n\nconst nullNullTuple = [null, null];\n\nconst isArr = Array.isArray;\nconst isInt = Number.isInteger;\nconst isUndef = v => v === void 0;\n\nfunction isStr(v) {\n\treturn typeof v == 'string';\n}\n\nfunction isObj(v) {\n\tlet is = false;\n\n\tif (v != null) {\n\t\tlet c = v.constructor;\n\t\tis = c == null || c == Object;\n\t}\n\n\treturn is;\n}\n\nfunction fastIsObj(v) {\n\treturn v != null && typeof v == 'object';\n}\n\nconst TypedArray = Object.getPrototypeOf(Uint8Array);\n\nfunction copy(o, _isObj = isObj) {\n\tlet out;\n\n\tif (isArr(o)) {\n\t\tlet val = o.find(v => v != null);\n\n\t\tif (isArr(val) || _isObj(val)) {\n\t\t\tout = Array(o.length);\n\t\t\tfor (let i = 0; i < o.length; i++)\n\t\t\t\tout[i] = copy(o[i], _isObj);\n\t\t}\n\t\telse\n\t\t\tout = o.slice();\n\t}\n\telse if (o instanceof TypedArray) // also (ArrayBuffer.isView(o) && !(o instanceof DataView))\n\t\tout = o.slice();\n\telse if (_isObj(o)) {\n\t\tout = {};\n\t\tfor (let k in o)\n\t\t\tout[k] = copy(o[k], _isObj);\n\t}\n\telse\n\t\tout = o;\n\n\treturn out;\n}\n\nfunction assign(targ) {\n\tlet args = arguments;\n\n\tfor (let i = 1; i < args.length; i++) {\n\t\tlet src = args[i];\n\n\t\tfor (let key in src) {\n\t\t\tif (isObj(targ[key]))\n\t\t\t\tassign(targ[key], copy(src[key]));\n\t\t\telse\n\t\t\t\ttarg[key] = copy(src[key]);\n\t\t}\n\t}\n\n\treturn targ;\n}\n\n// nullModes\nconst NULL_REMOVE = 0;  // nulls are converted to undefined (e.g. for spanGaps: true)\nconst NULL_RETAIN = 1;  // nulls are retained, with alignment artifacts set to undefined (default)\nconst NULL_EXPAND = 2;  // nulls are expanded to include any adjacent alignment artifacts\n\n// sets undefined values to nulls when adjacent to existing nulls (minesweeper)\nfunction nullExpand(yVals, nullIdxs, alignedLen) {\n\tfor (let i = 0, xi, lastNullIdx = -1; i < nullIdxs.length; i++) {\n\t\tlet nullIdx = nullIdxs[i];\n\n\t\tif (nullIdx > lastNullIdx) {\n\t\t\txi = nullIdx - 1;\n\t\t\twhile (xi >= 0 && yVals[xi] == null)\n\t\t\t\tyVals[xi--] = null;\n\n\t\t\txi = nullIdx + 1;\n\t\t\twhile (xi < alignedLen && yVals[xi] == null)\n\t\t\t\tyVals[lastNullIdx = xi++] = null;\n\t\t}\n\t}\n}\n\n// nullModes is a tables-matched array indicating how to treat nulls in each series\n// output is sorted ASC on the joined field (table[0]) and duplicate join values are collapsed\nfunction join(tables, nullModes) {\n\tlet xVals = new Set();\n\n\tfor (let ti = 0; ti < tables.length; ti++) {\n\t\tlet t = tables[ti];\n\t\tlet xs = t[0];\n\t\tlet len = xs.length;\n\n\t\tfor (let i = 0; i < len; i++)\n\t\t\txVals.add(xs[i]);\n\t}\n\n\tlet data = [Array.from(xVals).sort((a, b) => a - b)];\n\n\tlet alignedLen = data[0].length;\n\n\tlet xIdxs = new Map();\n\n\tfor (let i = 0; i < alignedLen; i++)\n\t\txIdxs.set(data[0][i], i);\n\n\tfor (let ti = 0; ti < tables.length; ti++) {\n\t\tlet t = tables[ti];\n\t\tlet xs = t[0];\n\n\t\tfor (let si = 1; si < t.length; si++) {\n\t\t\tlet ys = t[si];\n\n\t\t\tlet yVals = Array(alignedLen).fill(undefined);\n\n\t\t\tlet nullMode = nullModes ? nullModes[ti][si] : NULL_RETAIN;\n\n\t\t\tlet nullIdxs = [];\n\n\t\t\tfor (let i = 0; i < ys.length; i++) {\n\t\t\t\tlet yVal = ys[i];\n\t\t\t\tlet alignedIdx = xIdxs.get(xs[i]);\n\n\t\t\t\tif (yVal === null) {\n\t\t\t\t\tif (nullMode != NULL_REMOVE) {\n\t\t\t\t\t\tyVals[alignedIdx] = yVal;\n\n\t\t\t\t\t\tif (nullMode == NULL_EXPAND)\n\t\t\t\t\t\t\tnullIdxs.push(alignedIdx);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tyVals[alignedIdx] = yVal;\n\t\t\t}\n\n\t\t\tnullExpand(yVals, nullIdxs, alignedLen);\n\n\t\t\tdata.push(yVals);\n\t\t}\n\t}\n\n\treturn data;\n}\n\nconst microTask = typeof queueMicrotask == \"undefined\" ? fn => Promise.resolve().then(fn) : queueMicrotask;\n\nconst months = [\n\t\"January\",\n\t\"February\",\n\t\"March\",\n\t\"April\",\n\t\"May\",\n\t\"June\",\n\t\"July\",\n\t\"August\",\n\t\"September\",\n\t\"October\",\n\t\"November\",\n\t\"December\",\n];\n\nconst days = [\n\t\"Sunday\",\n\t\"Monday\",\n\t\"Tuesday\",\n\t\"Wednesday\",\n\t\"Thursday\",\n\t\"Friday\",\n\t\"Saturday\",\n];\n\nfunction slice3(str) {\n\treturn str.slice(0, 3);\n}\n\nconst days3 = days.map(slice3);\n\nconst months3 = months.map(slice3);\n\nconst engNames = {\n\tMMMM: months,\n\tMMM:  months3,\n\tWWWW: days,\n\tWWW:  days3,\n};\n\nfunction zeroPad2(int) {\n\treturn (int < 10 ? '0' : '') + int;\n}\n\nfunction zeroPad3(int) {\n\treturn (int < 10 ? '00' : int < 100 ? '0' : '') + int;\n}\n\n/*\nfunction suffix(int) {\n\tlet mod10 = int % 10;\n\n\treturn int + (\n\t\tmod10 == 1 && int != 11 ? \"st\" :\n\t\tmod10 == 2 && int != 12 ? \"nd\" :\n\t\tmod10 == 3 && int != 13 ? \"rd\" : \"th\"\n\t);\n}\n*/\n\nconst subs = {\n\t// 2019\n\tYYYY:\td => d.getFullYear(),\n\t// 19\n\tYY:\t\td => (d.getFullYear()+'').slice(2),\n\t// July\n\tMMMM:\t(d, names) => names.MMMM[d.getMonth()],\n\t// Jul\n\tMMM:\t(d, names) => names.MMM[d.getMonth()],\n\t// 07\n\tMM:\t\td => zeroPad2(d.getMonth()+1),\n\t// 7\n\tM:\t\td => d.getMonth()+1,\n\t// 09\n\tDD:\t\td => zeroPad2(d.getDate()),\n\t// 9\n\tD:\t\td => d.getDate(),\n\t// Monday\n\tWWWW:\t(d, names) => names.WWWW[d.getDay()],\n\t// Mon\n\tWWW:\t(d, names) => names.WWW[d.getDay()],\n\t// 03\n\tHH:\t\td => zeroPad2(d.getHours()),\n\t// 3\n\tH:\t\td => d.getHours(),\n\t// 9 (12hr, unpadded)\n\th:\t\td => {let h = d.getHours(); return h == 0 ? 12 : h > 12 ? h - 12 : h;},\n\t// AM\n\tAA:\t\td => d.getHours() >= 12 ? 'PM' : 'AM',\n\t// am\n\taa:\t\td => d.getHours() >= 12 ? 'pm' : 'am',\n\t// a\n\ta:\t\td => d.getHours() >= 12 ? 'p' : 'a',\n\t// 09\n\tmm:\t\td => zeroPad2(d.getMinutes()),\n\t// 9\n\tm:\t\td => d.getMinutes(),\n\t// 09\n\tss:\t\td => zeroPad2(d.getSeconds()),\n\t// 9\n\ts:\t\td => d.getSeconds(),\n\t// 374\n\tfff:\td => zeroPad3(d.getMilliseconds()),\n};\n\nfunction fmtDate(tpl, names) {\n\tnames = names || engNames;\n\tlet parts = [];\n\n\tlet R = /\\{([a-z]+)\\}|[^{]+/gi, m;\n\n\twhile (m = R.exec(tpl))\n\t\tparts.push(m[0][0] == '{' ? subs[m[1]] : m[0]);\n\n\treturn d => {\n\t\tlet out = '';\n\n\t\tfor (let i = 0; i < parts.length; i++)\n\t\t\tout += typeof parts[i] == \"string\" ? parts[i] : parts[i](d, names);\n\n\t\treturn out;\n\t}\n}\n\nconst localTz = new Intl.DateTimeFormat().resolvedOptions().timeZone;\n\n// https://stackoverflow.com/questions/15141762/how-to-initialize-a-javascript-date-to-a-particular-time-zone/53652131#53652131\nfunction tzDate(date, tz) {\n\tlet date2;\n\n\t// perf optimization\n\tif (tz == 'UTC' || tz == 'Etc/UTC')\n\t\tdate2 = new Date(+date + date.getTimezoneOffset() * 6e4);\n\telse if (tz == localTz)\n\t\tdate2 = date;\n\telse {\n\t\tdate2 = new Date(date.toLocaleString('en-US', {timeZone: tz}));\n\t\tdate2.setMilliseconds(date.getMilliseconds());\n\t}\n\n\treturn date2;\n}\n\n//export const series = [];\n\n// default formatters:\n\nconst onlyWhole = v => v % 1 == 0;\n\nconst allMults = [1,2,2.5,5];\n\n// ...0.01, 0.02, 0.025, 0.05, 0.1, 0.2, 0.25, 0.5\nconst decIncrs = genIncrs(10, -16, 0, allMults);\n\n// 1, 2, 2.5, 5, 10, 20, 25, 50...\nconst oneIncrs = genIncrs(10, 0, 16, allMults);\n\n// 1, 2,      5, 10, 20, 25, 50...\nconst wholeIncrs = oneIncrs.filter(onlyWhole);\n\nconst numIncrs = decIncrs.concat(oneIncrs);\n\nconst NL = \"\\n\";\n\nconst yyyy    = \"{YYYY}\";\nconst NLyyyy  = NL + yyyy;\nconst md      = \"{M}/{D}\";\nconst NLmd    = NL + md;\nconst NLmdyy  = NLmd + \"/{YY}\";\n\nconst aa      = \"{aa}\";\nconst hmm     = \"{h}:{mm}\";\nconst hmmaa   = hmm + aa;\nconst NLhmmaa = NL + hmmaa;\nconst ss      = \":{ss}\";\n\nconst _ = null;\n\nfunction genTimeStuffs(ms) {\n\tlet\ts  = ms * 1e3,\n\t\tm  = s  * 60,\n\t\th  = m  * 60,\n\t\td  = h  * 24,\n\t\tmo = d  * 30,\n\t\ty  = d  * 365;\n\n\t// min of 1e-3 prevents setting a temporal x ticks too small since Date objects cannot advance ticks smaller than 1ms\n\tlet subSecIncrs = ms == 1 ? genIncrs(10, 0, 3, allMults).filter(onlyWhole) : genIncrs(10, -3, 0, allMults);\n\n\tlet timeIncrs = subSecIncrs.concat([\n\t\t// minute divisors (# of secs)\n\t\ts,\n\t\ts * 5,\n\t\ts * 10,\n\t\ts * 15,\n\t\ts * 30,\n\t\t// hour divisors (# of mins)\n\t\tm,\n\t\tm * 5,\n\t\tm * 10,\n\t\tm * 15,\n\t\tm * 30,\n\t\t// day divisors (# of hrs)\n\t\th,\n\t\th * 2,\n\t\th * 3,\n\t\th * 4,\n\t\th * 6,\n\t\th * 8,\n\t\th * 12,\n\t\t// month divisors TODO: need more?\n\t\td,\n\t\td * 2,\n\t\td * 3,\n\t\td * 4,\n\t\td * 5,\n\t\td * 6,\n\t\td * 7,\n\t\td * 8,\n\t\td * 9,\n\t\td * 10,\n\t\td * 15,\n\t\t// year divisors (# months, approx)\n\t\tmo,\n\t\tmo * 2,\n\t\tmo * 3,\n\t\tmo * 4,\n\t\tmo * 6,\n\t\t// century divisors\n\t\ty,\n\t\ty * 2,\n\t\ty * 5,\n\t\ty * 10,\n\t\ty * 25,\n\t\ty * 50,\n\t\ty * 100,\n\t]);\n\n\t// [0]:   minimum num secs in the tick incr\n\t// [1]:   default tick format\n\t// [2-7]: rollover tick formats\n\t// [8]:   mode: 0: replace [1] -> [2-7], 1: concat [1] + [2-7]\n\tconst _timeAxisStamps = [\n\t//   tick incr    default          year                    month   day                   hour    min       sec   mode\n\t\t[y,           yyyy,            _,                      _,      _,                    _,      _,        _,       1],\n\t\t[d * 28,      \"{MMM}\",         NLyyyy,                 _,      _,                    _,      _,        _,       1],\n\t\t[d,           md,              NLyyyy,                 _,      _,                    _,      _,        _,       1],\n\t\t[h,           \"{h}\" + aa,      NLmdyy,                 _,      NLmd,                 _,      _,        _,       1],\n\t\t[m,           hmmaa,           NLmdyy,                 _,      NLmd,                 _,      _,        _,       1],\n\t\t[s,           ss,              NLmdyy + \" \" + hmmaa,   _,      NLmd + \" \" + hmmaa,   _,      NLhmmaa,  _,       1],\n\t\t[ms,          ss + \".{fff}\",   NLmdyy + \" \" + hmmaa,   _,      NLmd + \" \" + hmmaa,   _,      NLhmmaa,  _,       1],\n\t];\n\n\t// the ensures that axis ticks, values & grid are aligned to logical temporal breakpoints and not an arbitrary timestamp\n\t// https://www.timeanddate.com/time/dst/\n\t// https://www.timeanddate.com/time/dst/2019.html\n\t// https://www.epochconverter.com/timezones\n\tfunction timeAxisSplits(tzDate) {\n\t\treturn (self, axisIdx, scaleMin, scaleMax, foundIncr, foundSpace) => {\n\t\t\tlet splits = [];\n\t\t\tlet isYr = foundIncr >= y;\n\t\t\tlet isMo = foundIncr >= mo && foundIncr < y;\n\n\t\t\t// get the timezone-adjusted date\n\t\t\tlet minDate = tzDate(scaleMin);\n\t\t\tlet minDateTs = roundDec(minDate * ms, 3);\n\n\t\t\t// get ts of 12am (this lands us at or before the original scaleMin)\n\t\t\tlet minMin = mkDate(minDate.getFullYear(), isYr ? 0 : minDate.getMonth(), isMo || isYr ? 1 : minDate.getDate());\n\t\t\tlet minMinTs = roundDec(minMin * ms, 3);\n\n\t\t\tif (isMo || isYr) {\n\t\t\t\tlet moIncr = isMo ? foundIncr / mo : 0;\n\t\t\t\tlet yrIncr = isYr ? foundIncr / y  : 0;\n\t\t\t//\tlet tzOffset = scaleMin - minDateTs;\t\t// needed?\n\t\t\t\tlet split = minDateTs == minMinTs ? minDateTs : roundDec(mkDate(minMin.getFullYear() + yrIncr, minMin.getMonth() + moIncr, 1) * ms, 3);\n\t\t\t\tlet splitDate = new Date(round(split / ms));\n\t\t\t\tlet baseYear = splitDate.getFullYear();\n\t\t\t\tlet baseMonth = splitDate.getMonth();\n\n\t\t\t\tfor (let i = 0; split <= scaleMax; i++) {\n\t\t\t\t\tlet next = mkDate(baseYear + yrIncr * i, baseMonth + moIncr * i, 1);\n\t\t\t\t\tlet offs = next - tzDate(roundDec(next * ms, 3));\n\n\t\t\t\t\tsplit = roundDec((+next + offs) * ms, 3);\n\n\t\t\t\t\tif (split <= scaleMax)\n\t\t\t\t\t\tsplits.push(split);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet incr0 = foundIncr >= d ? d : foundIncr;\n\t\t\t\tlet tzOffset = floor(scaleMin) - floor(minDateTs);\n\t\t\t\tlet split = minMinTs + tzOffset + incrRoundUp(minDateTs - minMinTs, incr0);\n\t\t\t\tsplits.push(split);\n\n\t\t\t\tlet date0 = tzDate(split);\n\n\t\t\t\tlet prevHour = date0.getHours() + (date0.getMinutes() / m) + (date0.getSeconds() / h);\n\t\t\t\tlet incrHours = foundIncr / h;\n\n\t\t\t\tlet minSpace = self.axes[axisIdx]._space;\n\t\t\t\tlet pctSpace = foundSpace / minSpace;\n\n\t\t\t\twhile (1) {\n\t\t\t\t\tsplit = roundDec(split + foundIncr, ms == 1 ? 0 : 3);\n\n\t\t\t\t\tif (split > scaleMax)\n\t\t\t\t\t\tbreak;\n\n\t\t\t\t\tif (incrHours > 1) {\n\t\t\t\t\t\tlet expectedHour = floor(roundDec(prevHour + incrHours, 6)) % 24;\n\t\t\t\t\t\tlet splitDate = tzDate(split);\n\t\t\t\t\t\tlet actualHour = splitDate.getHours();\n\n\t\t\t\t\t\tlet dstShift = actualHour - expectedHour;\n\n\t\t\t\t\t\tif (dstShift > 1)\n\t\t\t\t\t\t\tdstShift = -1;\n\n\t\t\t\t\t\tsplit -= dstShift * h;\n\n\t\t\t\t\t\tprevHour = (prevHour + incrHours) % 24;\n\n\t\t\t\t\t\t// add a tick only if it's further than 70% of the min allowed label spacing\n\t\t\t\t\t\tlet prevSplit = splits[splits.length - 1];\n\t\t\t\t\t\tlet pctIncr = roundDec((split - prevSplit) / foundIncr, 3);\n\n\t\t\t\t\t\tif (pctIncr * pctSpace >= .7)\n\t\t\t\t\t\t\tsplits.push(split);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tsplits.push(split);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn splits;\n\t\t}\n\t}\n\n\treturn [\n\t\ttimeIncrs,\n\t\t_timeAxisStamps,\n\t\ttimeAxisSplits,\n\t];\n}\n\nconst [ timeIncrsMs, _timeAxisStampsMs, timeAxisSplitsMs ] = genTimeStuffs(1);\nconst [ timeIncrsS,  _timeAxisStampsS,  timeAxisSplitsS  ] = genTimeStuffs(1e-3);\n\n// base 2\ngenIncrs(2, -53, 53, [1]);\n\n/*\nconsole.log({\n\tdecIncrs,\n\toneIncrs,\n\twholeIncrs,\n\tnumIncrs,\n\ttimeIncrs,\n\tfixedDec,\n});\n*/\n\nfunction timeAxisStamps(stampCfg, fmtDate) {\n\treturn stampCfg.map(s => s.map((v, i) =>\n\t\ti == 0 || i == 8 || v == null ? v : fmtDate(i == 1 || s[8] == 0 ? v : s[1] + v)\n\t));\n}\n\n// TODO: will need to accept spaces[] and pull incr into the loop when grid will be non-uniform, eg for log scales.\n// currently we ignore this for months since they're *nearly* uniform and the added complexity is not worth it\nfunction timeAxisVals(tzDate, stamps) {\n\treturn (self, splits, axisIdx, foundSpace, foundIncr) => {\n\t\tlet s = stamps.find(s => foundIncr >= s[0]) || stamps[stamps.length - 1];\n\n\t\t// these track boundaries when a full label is needed again\n\t\tlet prevYear;\n\t\tlet prevMnth;\n\t\tlet prevDate;\n\t\tlet prevHour;\n\t\tlet prevMins;\n\t\tlet prevSecs;\n\n\t\treturn splits.map(split => {\n\t\t\tlet date = tzDate(split);\n\n\t\t\tlet newYear = date.getFullYear();\n\t\t\tlet newMnth = date.getMonth();\n\t\t\tlet newDate = date.getDate();\n\t\t\tlet newHour = date.getHours();\n\t\t\tlet newMins = date.getMinutes();\n\t\t\tlet newSecs = date.getSeconds();\n\n\t\t\tlet stamp = (\n\t\t\t\tnewYear != prevYear && s[2] ||\n\t\t\t\tnewMnth != prevMnth && s[3] ||\n\t\t\t\tnewDate != prevDate && s[4] ||\n\t\t\t\tnewHour != prevHour && s[5] ||\n\t\t\t\tnewMins != prevMins && s[6] ||\n\t\t\t\tnewSecs != prevSecs && s[7] ||\n\t\t\t\t                       s[1]\n\t\t\t);\n\n\t\t\tprevYear = newYear;\n\t\t\tprevMnth = newMnth;\n\t\t\tprevDate = newDate;\n\t\t\tprevHour = newHour;\n\t\t\tprevMins = newMins;\n\t\t\tprevSecs = newSecs;\n\n\t\t\treturn stamp(date);\n\t\t});\n\t}\n}\n\n// for when axis.values is defined as a static fmtDate template string\nfunction timeAxisVal(tzDate, dateTpl) {\n\tlet stamp = fmtDate(dateTpl);\n\treturn (self, splits, axisIdx, foundSpace, foundIncr) => splits.map(split => stamp(tzDate(split)));\n}\n\nfunction mkDate(y, m, d) {\n\treturn new Date(y, m, d);\n}\n\nfunction timeSeriesStamp(stampCfg, fmtDate) {\n\treturn fmtDate(stampCfg);\n}\nconst _timeSeriesStamp = '{YYYY}-{MM}-{DD} {h}:{mm}{aa}';\n\nfunction timeSeriesVal(tzDate, stamp) {\n\treturn (self, val, seriesIdx, dataIdx) => dataIdx == null ? LEGEND_DISP : stamp(tzDate(val));\n}\n\nfunction legendStroke(self, seriesIdx) {\n\tlet s = self.series[seriesIdx];\n\treturn s.width ? s.stroke(self, seriesIdx) : s.points.width ? s.points.stroke(self, seriesIdx) : null;\n}\n\nfunction legendFill(self, seriesIdx) {\n\treturn self.series[seriesIdx].fill(self, seriesIdx);\n}\n\nconst legendOpts = {\n\tshow: true,\n\tlive: true,\n\tisolate: false,\n\tmount: noop,\n\tmarkers: {\n\t\tshow: true,\n\t\twidth: 2,\n\t\tstroke: legendStroke,\n\t\tfill: legendFill,\n\t\tdash: \"solid\",\n\t},\n\tidx: null,\n\tidxs: null,\n\tvalues: [],\n};\n\nfunction cursorPointShow(self, si) {\n\tlet o = self.cursor.points;\n\n\tlet pt = placeDiv();\n\n\tlet size = o.size(self, si);\n\tsetStylePx(pt, WIDTH, size);\n\tsetStylePx(pt, HEIGHT, size);\n\n\tlet mar = size / -2;\n\tsetStylePx(pt, \"marginLeft\", mar);\n\tsetStylePx(pt, \"marginTop\", mar);\n\n\tlet width = o.width(self, si, size);\n\twidth && setStylePx(pt, \"borderWidth\", width);\n\n\treturn pt;\n}\n\nfunction cursorPointFill(self, si) {\n\tlet sp = self.series[si].points;\n\treturn sp._fill || sp._stroke;\n}\n\nfunction cursorPointStroke(self, si) {\n\tlet sp = self.series[si].points;\n\treturn sp._stroke || sp._fill;\n}\n\nfunction cursorPointSize(self, si) {\n\tlet sp = self.series[si].points;\n\treturn sp.size;\n}\n\nfunction dataIdx(self, seriesIdx, cursorIdx) {\n\treturn cursorIdx;\n}\n\nconst moveTuple = [0,0];\n\nfunction cursorMove(self, mouseLeft1, mouseTop1) {\n\tmoveTuple[0] = mouseLeft1;\n\tmoveTuple[1] = mouseTop1;\n\treturn moveTuple;\n}\n\nfunction filtBtn0(self, targ, handle) {\n\treturn e => {\n\t\te.button == 0 && handle(e);\n\t};\n}\n\nfunction passThru(self, targ, handle) {\n\treturn handle;\n}\n\nconst cursorOpts = {\n\tshow: true,\n\tx: true,\n\ty: true,\n\tlock: false,\n\tmove: cursorMove,\n\tpoints: {\n\t\tshow:   cursorPointShow,\n\t\tsize:   cursorPointSize,\n\t\twidth:  0,\n\t\tstroke: cursorPointStroke,\n\t\tfill:   cursorPointFill,\n\t},\n\n\tbind: {\n\t\tmousedown:   filtBtn0,\n\t\tmouseup:     filtBtn0,\n\t\tclick:       filtBtn0,\n\t\tdblclick:    filtBtn0,\n\n\t\tmousemove:   passThru,\n\t\tmouseleave:  passThru,\n\t\tmouseenter:  passThru,\n\t},\n\n\tdrag: {\n\t\tsetScale: true,\n\t\tx: true,\n\t\ty: false,\n\t\tdist: 0,\n\t\tuni: null,\n\t\tclick: (self, e) => {\n\t\t//\te.preventDefault();\n\t\t\te.stopPropagation();\n\t\t\te.stopImmediatePropagation();\n\t\t},\n\t\t_x: false,\n\t\t_y: false,\n\t},\n\n\tfocus: {\n\t\tprox: -1,\n\t\tbias: 0,\n\t},\n\n\tleft: -10,\n\ttop: -10,\n\tidx: null,\n\tdataIdx,\n\tidxs: null,\n};\n\nconst axisLines = {\n\tshow: true,\n\tstroke: \"rgba(0,0,0,0.07)\",\n\twidth: 2,\n//\tdash: [],\n};\n\nconst grid = assign({}, axisLines, {\n\tfilter: retArg1,\n});\n\nconst ticks = assign({}, grid, {\n\tsize: 10,\n});\n\nconst border = assign({}, axisLines, {\n\tshow: false,\n});\n\nconst font      = '12px system-ui, -apple-system, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"';\nconst labelFont = \"bold \" + font;\nconst lineMult = 1.5;\t\t// font-size multiplier\n\nconst xAxisOpts = {\n\tshow: true,\n\tscale: \"x\",\n\tstroke: hexBlack,\n\tspace: 50,\n\tgap: 5,\n\tsize: 50,\n\tlabelGap: 0,\n\tlabelSize: 30,\n\tlabelFont,\n\tside: 2,\n//\tclass: \"x-vals\",\n//\tincrs: timeIncrs,\n//\tvalues: timeVals,\n//\tfilter: retArg1,\n\tgrid,\n\tticks,\n\tborder,\n\tfont,\n\trotate: 0,\n};\n\nconst numSeriesLabel = \"Value\";\nconst timeSeriesLabel = \"Time\";\n\nconst xSeriesOpts = {\n\tshow: true,\n\tscale: \"x\",\n\tauto: false,\n\tsorted: 1,\n//\tlabel: \"Time\",\n//\tvalue: v => stamp(new Date(v * 1e3)),\n\n\t// internal caches\n\tmin: inf,\n\tmax: -inf,\n\tidxs: [],\n};\n\nfunction numAxisVals(self, splits, axisIdx, foundSpace, foundIncr) {\n\treturn splits.map(v => v == null ? \"\" : fmtNum(v));\n}\n\nfunction numAxisSplits(self, axisIdx, scaleMin, scaleMax, foundIncr, foundSpace, forceMin) {\n\tlet splits = [];\n\n\tlet numDec = fixedDec.get(foundIncr) || 0;\n\n\tscaleMin = forceMin ? scaleMin : roundDec(incrRoundUp(scaleMin, foundIncr), numDec);\n\n\tfor (let val = scaleMin; val <= scaleMax; val = roundDec(val + foundIncr, numDec))\n\t\tsplits.push(Object.is(val, -0) ? 0 : val);\t\t// coalesces -0\n\n\treturn splits;\n}\n\n// this doesnt work for sin, which needs to come off from 0 independently in pos and neg dirs\nfunction logAxisSplits(self, axisIdx, scaleMin, scaleMax, foundIncr, foundSpace, forceMin) {\n\tconst splits = [];\n\n\tconst logBase = self.scales[self.axes[axisIdx].scale].log;\n\n\tconst logFn = logBase == 10 ? log10 : log2;\n\n\tconst exp = floor(logFn(scaleMin));\n\n\tfoundIncr = pow(logBase, exp);\n\n\tif (logBase == 10 && exp < 0)\n\t\tfoundIncr = roundDec(foundIncr, -exp);\n\n\tlet split = scaleMin;\n\n\tdo {\n\t\tsplits.push(split);\n\t\tsplit = split + foundIncr;\n\n\t\tif (logBase == 10)\n\t\t\tsplit = roundDec(split, fixedDec.get(foundIncr));\n\n\t\tif (split >= foundIncr * logBase)\n\t\t\tfoundIncr = split;\n\n\t} while (split <= scaleMax);\n\n\treturn splits;\n}\n\nfunction asinhAxisSplits(self, axisIdx, scaleMin, scaleMax, foundIncr, foundSpace, forceMin) {\n\tlet sc = self.scales[self.axes[axisIdx].scale];\n\n\tlet linthresh = sc.asinh;\n\n\tlet posSplits = scaleMax > linthresh ? logAxisSplits(self, axisIdx, max(linthresh, scaleMin), scaleMax, foundIncr) : [linthresh];\n\tlet zero = scaleMax >= 0 && scaleMin <= 0 ? [0] : [];\n\tlet negSplits = scaleMin < -linthresh ? logAxisSplits(self, axisIdx, max(linthresh, -scaleMax), -scaleMin, foundIncr): [linthresh];\n\n\treturn negSplits.reverse().map(v => -v).concat(zero, posSplits);\n}\n\nconst RE_ALL   = /./;\nconst RE_12357 = /[12357]/;\nconst RE_125   = /[125]/;\nconst RE_1     = /1/;\n\nfunction log10AxisValsFilt(self, splits, axisIdx, foundSpace, foundIncr) {\n\tlet axis = self.axes[axisIdx];\n\tlet scaleKey = axis.scale;\n\tlet sc = self.scales[scaleKey];\n\n\tif (sc.distr == 3 && sc.log == 2)\n\t\treturn splits;\n\n\tlet valToPos = self.valToPos;\n\n\tlet minSpace = axis._space;\n\n\tlet _10 = valToPos(10, scaleKey);\n\n\tlet re = (\n\t\tvalToPos(9, scaleKey) - _10 >= minSpace ? RE_ALL :\n\t\tvalToPos(7, scaleKey) - _10 >= minSpace ? RE_12357 :\n\t\tvalToPos(5, scaleKey) - _10 >= minSpace ? RE_125 :\n\t\tRE_1\n\t);\n\n\treturn splits.map(v => ((sc.distr == 4 && v == 0) || re.test(v)) ? v : null);\n}\n\nfunction numSeriesVal(self, val, seriesIdx, dataIdx) {\n\treturn dataIdx == null ? LEGEND_DISP : val == null ? \"\" : fmtNum(val);\n}\n\nconst yAxisOpts = {\n\tshow: true,\n\tscale: \"y\",\n\tstroke: hexBlack,\n\tspace: 30,\n\tgap: 5,\n\tsize: 50,\n\tlabelGap: 0,\n\tlabelSize: 30,\n\tlabelFont,\n\tside: 3,\n//\tclass: \"y-vals\",\n//\tincrs: numIncrs,\n//\tvalues: (vals, space) => vals,\n//\tfilter: retArg1,\n\tgrid,\n\tticks,\n\tborder,\n\tfont,\n\trotate: 0,\n};\n\n// takes stroke width\nfunction ptDia(width, mult) {\n\tlet dia = 3 + (width || 1) * 2;\n\treturn roundDec(dia * mult, 3);\n}\n\nfunction seriesPointsShow(self, si) {\n\tlet { scale, idxs } = self.series[0];\n\tlet xData = self._data[0];\n\tlet p0 = self.valToPos(xData[idxs[0]], scale, true);\n\tlet p1 = self.valToPos(xData[idxs[1]], scale, true);\n\tlet dim = abs(p1 - p0);\n\n\tlet s = self.series[si];\n//\tconst dia = ptDia(s.width, pxRatio);\n\tlet maxPts = dim / (s.points.space * pxRatio);\n\treturn idxs[1] - idxs[0] <= maxPts;\n}\n\nconst facet = {\n\tscale: null,\n\tauto: true,\n\tsorted: 0,\n\n\t// internal caches\n\tmin: inf,\n\tmax: -inf,\n};\n\nconst gaps = (self, seriesIdx, idx0, idx1, nullGaps) => nullGaps;\n\nconst xySeriesOpts = {\n\tshow: true,\n\tauto: true,\n\tsorted: 0,\n\tgaps,\n\talpha: 1,\n\tfacets: [\n\t\tassign({}, facet, {scale: 'x'}),\n\t\tassign({}, facet, {scale: 'y'}),\n\t],\n};\n\nconst ySeriesOpts = {\n\tscale: \"y\",\n\tauto: true,\n\tsorted: 0,\n\tshow: true,\n\tspanGaps: false,\n\tgaps,\n\talpha: 1,\n\tpoints: {\n\t\tshow: seriesPointsShow,\n\t\tfilter: null,\n\t//  paths:\n\t//\tstroke: \"#000\",\n\t//\tfill: \"#fff\",\n\t//\twidth: 1,\n\t//\tsize: 10,\n\t},\n//\tlabel: \"Value\",\n//\tvalue: v => v,\n\tvalues: null,\n\n\t// internal caches\n\tmin: inf,\n\tmax: -inf,\n\tidxs: [],\n\n\tpath: null,\n\tclip: null,\n};\n\nfunction clampScale(self, val, scaleMin, scaleMax, scaleKey) {\n/*\n\tif (val < 0) {\n\t\tlet cssHgt = self.bbox.height / pxRatio;\n\t\tlet absPos = self.valToPos(abs(val), scaleKey);\n\t\tlet fromBtm = cssHgt - absPos;\n\t\treturn self.posToVal(cssHgt + fromBtm, scaleKey);\n\t}\n*/\n\treturn scaleMin / 10;\n}\n\nconst xScaleOpts = {\n\ttime: FEAT_TIME,\n\tauto: true,\n\tdistr: 1,\n\tlog: 10,\n\tasinh: 1,\n\tmin: null,\n\tmax: null,\n\tdir: 1,\n\tori: 0,\n};\n\nconst yScaleOpts = assign({}, xScaleOpts, {\n\ttime: false,\n\tori: 1,\n});\n\nconst syncs = {};\n\nfunction _sync(key, opts) {\n\tlet s = syncs[key];\n\n\tif (!s) {\n\t\ts = {\n\t\t\tkey,\n\t\t\tplots: [],\n\t\t\tsub(plot) {\n\t\t\t\ts.plots.push(plot);\n\t\t\t},\n\t\t\tunsub(plot) {\n\t\t\t\ts.plots = s.plots.filter(c => c != plot);\n\t\t\t},\n\t\t\tpub(type, self, x, y, w, h, i) {\n\t\t\t\tfor (let j = 0; j < s.plots.length; j++)\n\t\t\t\t\ts.plots[j] != self && s.plots[j].pub(type, self, x, y, w, h, i);\n\t\t\t},\n\t\t};\n\n\t\tif (key != null)\n\t\t\tsyncs[key] = s;\n\t}\n\n\treturn s;\n}\n\nconst BAND_CLIP_FILL   = 1 << 0;\nconst BAND_CLIP_STROKE = 1 << 1;\n\nfunction orient(u, seriesIdx, cb) {\n\tconst mode = u.mode;\n\tconst series = u.series[seriesIdx];\n\tconst data = mode == 2 ? u._data[seriesIdx] : u._data;\n\tconst scales = u.scales;\n\tconst bbox   = u.bbox;\n\n\tlet dx = data[0],\n\t\tdy = mode == 2 ? data[1] : data[seriesIdx],\n\t\tsx = mode == 2 ? scales[series.facets[0].scale] : scales[u.series[0].scale],\n\t\tsy = mode == 2 ? scales[series.facets[1].scale] : scales[series.scale],\n\t\tl = bbox.left,\n\t\tt = bbox.top,\n\t\tw = bbox.width,\n\t\th = bbox.height,\n\t\tH = u.valToPosH,\n\t\tV = u.valToPosV;\n\n\treturn (sx.ori == 0\n\t\t? cb(\n\t\t\tseries,\n\t\t\tdx,\n\t\t\tdy,\n\t\t\tsx,\n\t\t\tsy,\n\t\t\tH,\n\t\t\tV,\n\t\t\tl,\n\t\t\tt,\n\t\t\tw,\n\t\t\th,\n\t\t\tmoveToH,\n\t\t\tlineToH,\n\t\t\trectH,\n\t\t\tarcH,\n\t\t\tbezierCurveToH,\n\t\t)\n\t\t: cb(\n\t\t\tseries,\n\t\t\tdx,\n\t\t\tdy,\n\t\t\tsx,\n\t\t\tsy,\n\t\t\tV,\n\t\t\tH,\n\t\t\tt,\n\t\t\tl,\n\t\t\th,\n\t\t\tw,\n\t\t\tmoveToV,\n\t\t\tlineToV,\n\t\t\trectV,\n\t\t\tarcV,\n\t\t\tbezierCurveToV,\n\t\t)\n\t);\n}\n\nfunction bandFillClipDirs(self, seriesIdx) {\n\tlet fillDir = 0;\n\n\t// 2 bits, -1 | 1\n\tlet clipDirs = 0;\n\n\tlet bands = ifNull(self.bands, EMPTY_ARR);\n\n\tfor (let i = 0; i < bands.length; i++) {\n\t\tlet b = bands[i];\n\n\t\t// is a \"from\" band edge\n\t\tif (b.series[0] == seriesIdx)\n\t\t\tfillDir = b.dir;\n\t\t// is a \"to\" band edge\n\t\telse if (b.series[1] == seriesIdx) {\n\t\t\tif (b.dir == 1)\n\t\t\t\tclipDirs |= 1;\n\t\t\telse\n\t\t\t\tclipDirs |= 2;\n\t\t}\n\t}\n\n\treturn [\n\t\tfillDir,\n\t\t(\n\t\t\tclipDirs == 1 ? -1 : // neg only\n\t\t\tclipDirs == 2 ?  1 : // pos only\n\t\t\tclipDirs == 3 ?  2 : // both\n\t\t\t                 0   // neither\n\t\t)\n\t];\n}\n\nfunction seriesFillTo(self, seriesIdx, dataMin, dataMax, bandFillDir) {\n\tlet mode = self.mode;\n\tlet series = self.series[seriesIdx];\n\tlet scaleKey = mode == 2 ? series.facets[1].scale : series.scale;\n\tlet scale = self.scales[scaleKey];\n\n\treturn (\n\t\tbandFillDir == -1 ? scale.min :\n\t\tbandFillDir ==  1 ? scale.max :\n\t\tscale.distr ==  3 ? (\n\t\t\tscale.dir == 1 ? scale.min :\n\t\t\tscale.max\n\t\t) : 0\n\t);\n}\n\n// creates inverted band clip path (from stroke path -> yMax || yMin)\n// clipDir is always inverse of fillDir\n// default clip dir is upwards (1), since default band fill is downwards/fillBelowTo (-1) (highIdx -> lowIdx)\nfunction clipBandLine(self, seriesIdx, idx0, idx1, strokePath, clipDir) {\n\treturn orient(self, seriesIdx, (series, dataX, dataY, scaleX, scaleY, valToPosX, valToPosY, xOff, yOff, xDim, yDim) => {\n\t\tlet pxRound = series.pxRound;\n\n\t\tconst dir = scaleX.dir * (scaleX.ori == 0 ? 1 : -1);\n\t\tconst lineTo = scaleX.ori == 0 ? lineToH : lineToV;\n\n\t\tlet frIdx, toIdx;\n\n\t\tif (dir == 1) {\n\t\t\tfrIdx = idx0;\n\t\t\ttoIdx = idx1;\n\t\t}\n\t\telse {\n\t\t\tfrIdx = idx1;\n\t\t\ttoIdx = idx0;\n\t\t}\n\n\t\t// path start\n\t\tlet x0 = pxRound(valToPosX(dataX[frIdx], scaleX, xDim, xOff));\n\t\tlet y0 = pxRound(valToPosY(dataY[frIdx], scaleY, yDim, yOff));\n\t\t// path end x\n\t\tlet x1 = pxRound(valToPosX(dataX[toIdx], scaleX, xDim, xOff));\n\t\t// upper or lower y limit\n\t\tlet yLimit = pxRound(valToPosY(clipDir == 1 ? scaleY.max : scaleY.min, scaleY, yDim, yOff));\n\n\t\tlet clip = new Path2D(strokePath);\n\n\t\tlineTo(clip, x1, yLimit);\n\t\tlineTo(clip, x0, yLimit);\n\t\tlineTo(clip, x0, y0);\n\n\t\treturn clip;\n\t});\n}\n\nfunction clipGaps(gaps, ori, plotLft, plotTop, plotWid, plotHgt) {\n\tlet clip = null;\n\n\t// create clip path (invert gaps and non-gaps)\n\tif (gaps.length > 0) {\n\t\tclip = new Path2D();\n\n\t\tconst rect = ori == 0 ? rectH : rectV;\n\n\t\tlet prevGapEnd = plotLft;\n\n\t\tfor (let i = 0; i < gaps.length; i++) {\n\t\t\tlet g = gaps[i];\n\n\t\t\tif (g[1] > g[0]) {\n\t\t\t\tlet w = g[0] - prevGapEnd;\n\n\t\t\t\tw > 0 && rect(clip, prevGapEnd, plotTop, w, plotTop + plotHgt);\n\n\t\t\t\tprevGapEnd = g[1];\n\t\t\t}\n\t\t}\n\n\t\tlet w = plotLft + plotWid - prevGapEnd;\n\n\t\tw > 0 && rect(clip, prevGapEnd, plotTop, w, plotTop + plotHgt);\n\t}\n\n\treturn clip;\n}\n\nfunction addGap(gaps, fromX, toX) {\n\tlet prevGap = gaps[gaps.length - 1];\n\n\tif (prevGap && prevGap[0] == fromX)\t\t\t// TODO: gaps must be encoded at stroke widths?\n\t\tprevGap[1] = toX;\n\telse\n\t\tgaps.push([fromX, toX]);\n}\n\nfunction findGaps(xs, ys, idx0, idx1, dir, pixelForX, align) {\n\tlet gaps = [];\n\tlet len = xs.length;\n\n\tfor (let i = dir == 1 ? idx0 : idx1; i >= idx0 && i <= idx1; i += dir) {\n\t\tlet yVal = ys[i];\n\n\t\tif (yVal === null) {\n\t\t\tlet fr = i, to = i;\n\n\t\t\tif (dir == 1) {\n\t\t\t\twhile (++i <= idx1 && ys[i] === null)\n\t\t\t\t\tto = i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\twhile (--i >= idx0 && ys[i] === null)\n\t\t\t\t\tto = i;\n\t\t\t}\n\n\t\t\tlet frPx = pixelForX(xs[fr]);\n\t\t\tlet toPx = to == fr ? frPx : pixelForX(xs[to]);\n\n\t\t\t// if value adjacent to edge null is same pixel, then it's partially\n\t\t\t// filled and gap should start at next pixel\n\t\t\tlet fri2 = fr - dir;\n\t\t\tlet frPx2 = align <= 0 && fri2 >= 0 && fri2 < len ? pixelForX(xs[fri2]) : frPx;\n\t\t//\tif (frPx2 == frPx)\n\t\t//\t\tfrPx++;\n\t\t//\telse\n\t\t\t\tfrPx = frPx2;\n\n\t\t\tlet toi2 = to + dir;\n\t\t\tlet toPx2 = align >= 0 && toi2 >= 0 && toi2 < len ? pixelForX(xs[toi2]) : toPx;\n\t\t//\tif (toPx2 == toPx)\n\t\t//\t\ttoPx--;\n\t\t//\telse\n\t\t\t\ttoPx = toPx2;\n\n\t\t\tif (toPx >= frPx)\n\t\t\t\tgaps.push([frPx, toPx]); // addGap\n\t\t}\n\t}\n\n\treturn gaps;\n}\n\nfunction pxRoundGen(pxAlign) {\n\treturn pxAlign == 0 ? retArg0 : pxAlign == 1 ? round : v => incrRound(v, pxAlign);\n}\n\nfunction rect(ori) {\n\tlet moveTo = ori == 0 ?\n\t\tmoveToH :\n\t\tmoveToV;\n\n\tlet arcTo = ori == 0 ?\n\t\t(p, x1, y1, x2, y2, r) => { p.arcTo(x1, y1, x2, y2, r); } :\n\t\t(p, y1, x1, y2, x2, r) => { p.arcTo(x1, y1, x2, y2, r); };\n\n\tlet rect = ori == 0 ?\n\t\t(p, x, y, w, h) => { p.rect(x, y, w, h); } :\n\t\t(p, y, x, h, w) => { p.rect(x, y, w, h); };\n\n\t// TODO (pending better browser support): https://developer.mozilla.org/en-US/docs/Web/API/CanvasRenderingContext2D/roundRect\n\treturn (p, x, y, w, h, endRad = 0, baseRad = 0) => {\n\t\tif (endRad == 0 && baseRad == 0)\n\t\t\trect(p, x, y, w, h);\n\t\telse {\n\t\t\tendRad  = min(endRad,  w / 2, h / 2);\n\t\t\tbaseRad = min(baseRad, w / 2, h / 2);\n\n\t\t\t// adapted from https://stackoverflow.com/questions/1255512/how-to-draw-a-rounded-rectangle-using-html-canvas/7838871#7838871\n\t\t\tmoveTo(p, x + endRad, y);\n\t\t\tarcTo(p, x + w, y, x + w, y + h, endRad);\n\t\t\tarcTo(p, x + w, y + h, x, y + h, baseRad);\n\t\t\tarcTo(p, x, y + h, x, y, baseRad);\n\t\t\tarcTo(p, x, y, x + w, y, endRad);\n\t\t\tp.closePath();\n\t\t}\n\t};\n}\n\n// orientation-inverting canvas functions\nconst moveToH = (p, x, y) => { p.moveTo(x, y); };\nconst moveToV = (p, y, x) => { p.moveTo(x, y); };\nconst lineToH = (p, x, y) => { p.lineTo(x, y); };\nconst lineToV = (p, y, x) => { p.lineTo(x, y); };\nconst rectH = rect(0);\nconst rectV = rect(1);\nconst arcH = (p, x, y, r, startAngle, endAngle) => { p.arc(x, y, r, startAngle, endAngle); };\nconst arcV = (p, y, x, r, startAngle, endAngle) => { p.arc(x, y, r, startAngle, endAngle); };\nconst bezierCurveToH = (p, bp1x, bp1y, bp2x, bp2y, p2x, p2y) => { p.bezierCurveTo(bp1x, bp1y, bp2x, bp2y, p2x, p2y); };\nconst bezierCurveToV = (p, bp1y, bp1x, bp2y, bp2x, p2y, p2x) => { p.bezierCurveTo(bp1x, bp1y, bp2x, bp2y, p2x, p2y); };\n\n// TODO: drawWrap(seriesIdx, drawPoints) (save, restore, translate, clip)\nfunction points(opts) {\n\treturn (u, seriesIdx, idx0, idx1, filtIdxs) => {\n\t//\tlog(\"drawPoints()\", arguments);\n\n\t\treturn orient(u, seriesIdx, (series, dataX, dataY, scaleX, scaleY, valToPosX, valToPosY, xOff, yOff, xDim, yDim) => {\n\t\t\tlet { pxRound, points } = series;\n\n\t\t\tlet moveTo, arc;\n\n\t\t\tif (scaleX.ori == 0) {\n\t\t\t\tmoveTo = moveToH;\n\t\t\t\tarc = arcH;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmoveTo = moveToV;\n\t\t\t\tarc = arcV;\n\t\t\t}\n\n\t\t\tconst width = roundDec(points.width * pxRatio, 3);\n\n\t\t\tlet rad = (points.size - points.width) / 2 * pxRatio;\n\t\t\tlet dia = roundDec(rad * 2, 3);\n\n\t\t\tlet fill = new Path2D();\n\t\t\tlet clip = new Path2D();\n\n\t\t\tlet { left: lft, top: top, width: wid, height: hgt } = u.bbox;\n\n\t\t\trectH(clip,\n\t\t\t\tlft - dia,\n\t\t\t\ttop - dia,\n\t\t\t\twid + dia * 2,\n\t\t\t\thgt + dia * 2,\n\t\t\t);\n\n\t\t\tconst drawPoint = pi => {\n\t\t\t\tif (dataY[pi] != null) {\n\t\t\t\t\tlet x = pxRound(valToPosX(dataX[pi], scaleX, xDim, xOff));\n\t\t\t\t\tlet y = pxRound(valToPosY(dataY[pi], scaleY, yDim, yOff));\n\n\t\t\t\t\tmoveTo(fill, x + rad, y);\n\t\t\t\t\tarc(fill, x, y, rad, 0, PI * 2);\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (filtIdxs)\n\t\t\t\tfiltIdxs.forEach(drawPoint);\n\t\t\telse {\n\t\t\t\tfor (let pi = idx0; pi <= idx1; pi++)\n\t\t\t\t\tdrawPoint(pi);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tstroke: width > 0 ? fill : null,\n\t\t\t\tfill,\n\t\t\t\tclip,\n\t\t\t\tflags: BAND_CLIP_FILL | BAND_CLIP_STROKE,\n\t\t\t};\n\t\t});\n\t};\n}\n\nfunction _drawAcc(lineTo) {\n\treturn (stroke, accX, minY, maxY, inY, outY) => {\n\t\tif (minY != maxY) {\n\t\t\tif (inY != minY && outY != minY)\n\t\t\t\tlineTo(stroke, accX, minY);\n\t\t\tif (inY != maxY && outY != maxY)\n\t\t\t\tlineTo(stroke, accX, maxY);\n\n\t\t\tlineTo(stroke, accX, outY);\n\t\t}\n\t};\n}\n\nconst drawAccH = _drawAcc(lineToH);\nconst drawAccV = _drawAcc(lineToV);\n\nfunction linear(opts) {\n\tconst alignGaps = ifNull(opts?.alignGaps, 0);\n\n\treturn (u, seriesIdx, idx0, idx1) => {\n\t\treturn orient(u, seriesIdx, (series, dataX, dataY, scaleX, scaleY, valToPosX, valToPosY, xOff, yOff, xDim, yDim) => {\n\t\t\tlet pxRound = series.pxRound;\n\n\t\t\tlet pixelForX = val => pxRound(valToPosX(val, scaleX, xDim, xOff));\n\t\t\tlet pixelForY = val => pxRound(valToPosY(val, scaleY, yDim, yOff));\n\n\t\t\tlet lineTo, drawAcc;\n\n\t\t\tif (scaleX.ori == 0) {\n\t\t\t\tlineTo = lineToH;\n\t\t\t\tdrawAcc = drawAccH;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlineTo = lineToV;\n\t\t\t\tdrawAcc = drawAccV;\n\t\t\t}\n\n\t\t\tconst dir = scaleX.dir * (scaleX.ori == 0 ? 1 : -1);\n\n\t\t\tconst _paths = {stroke: new Path2D(), fill: null, clip: null, band: null, gaps: null, flags: BAND_CLIP_FILL};\n\t\t\tconst stroke = _paths.stroke;\n\n\t\t\tlet minY = inf,\n\t\t\t\tmaxY = -inf,\n\t\t\t\tinY, outY, drawnAtX;\n\n\t\t\tlet accX = pixelForX(dataX[dir == 1 ? idx0 : idx1]);\n\n\t\t\t// data edges\n\t\t\tlet lftIdx = nonNullIdx(dataY, idx0, idx1,  1 * dir);\n\t\t\tlet rgtIdx = nonNullIdx(dataY, idx0, idx1, -1 * dir);\n\t\t\tlet lftX   =  pixelForX(dataX[lftIdx]);\n\t\t\tlet rgtX   =  pixelForX(dataX[rgtIdx]);\n\n\t\t\tlet hasGap = false;\n\n\t\t\tfor (let i = dir == 1 ? idx0 : idx1; i >= idx0 && i <= idx1; i += dir) {\n\t\t\t\tlet x = pixelForX(dataX[i]);\n\t\t\t\tlet yVal = dataY[i];\n\n\t\t\t\tif (x == accX) {\n\t\t\t\t\tif (yVal != null) {\n\t\t\t\t\t\toutY = pixelForY(yVal);\n\n\t\t\t\t\t\tif (minY == inf) {\n\t\t\t\t\t\t\tlineTo(stroke, x, outY);\n\t\t\t\t\t\t\tinY = outY;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tminY = min(outY, minY);\n\t\t\t\t\t\tmaxY = max(outY, maxY);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tif (yVal === null)\n\t\t\t\t\t\t\thasGap = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (minY != inf) {\n\t\t\t\t\t\tdrawAcc(stroke, accX, minY, maxY, inY, outY);\n\t\t\t\t\t\tdrawnAtX = accX;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (yVal != null) {\n\t\t\t\t\t\toutY = pixelForY(yVal);\n\t\t\t\t\t\tlineTo(stroke, x, outY);\n\t\t\t\t\t\tminY = maxY = inY = outY;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tminY = inf;\n\t\t\t\t\t\tmaxY = -inf;\n\n\t\t\t\t\t\tif (yVal === null)\n\t\t\t\t\t\t\thasGap = true;\n\t\t\t\t\t}\n\n\t\t\t\t\taccX = x;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (minY != inf && minY != maxY && drawnAtX != accX)\n\t\t\t\tdrawAcc(stroke, accX, minY, maxY, inY, outY);\n\n\t\t\tlet [ bandFillDir, bandClipDir ] = bandFillClipDirs(u, seriesIdx);\n\n\t\t\tif (series.fill != null || bandFillDir != 0) {\n\t\t\t\tlet fill = _paths.fill = new Path2D(stroke);\n\n\t\t\t\tlet fillToVal = series.fillTo(u, seriesIdx, series.min, series.max, bandFillDir);\n\t\t\t\tlet fillToY = pixelForY(fillToVal);\n\n\t\t\t\tlineTo(fill, rgtX, fillToY);\n\t\t\t\tlineTo(fill, lftX, fillToY);\n\t\t\t}\n\n\t\t\tif (!series.spanGaps) {\n\t\t\t//\tconsole.time('gaps');\n\t\t\t\tlet gaps = [];\n\n\t\t\t\thasGap && gaps.push(...findGaps(dataX, dataY, idx0, idx1, dir, pixelForX, alignGaps));\n\n\t\t\t//\tconsole.timeEnd('gaps');\n\n\t\t\t//\tconsole.log('gaps', JSON.stringify(gaps));\n\n\t\t\t\t_paths.gaps = gaps = series.gaps(u, seriesIdx, idx0, idx1, gaps);\n\n\t\t\t\t_paths.clip = clipGaps(gaps, scaleX.ori, xOff, yOff, xDim, yDim);\n\t\t\t}\n\n\t\t\tif (bandClipDir != 0) {\n\t\t\t\t_paths.band = bandClipDir == 2 ? [\n\t\t\t\t\tclipBandLine(u, seriesIdx, idx0, idx1, stroke, -1),\n\t\t\t\t\tclipBandLine(u, seriesIdx, idx0, idx1, stroke,  1),\n\t\t\t\t] : clipBandLine(u, seriesIdx, idx0, idx1, stroke, bandClipDir);\n\t\t\t}\n\n\t\t\treturn _paths;\n\t\t});\n\t};\n}\n\n// BUG: align: -1 behaves like align: 1 when scale.dir: -1\nfunction stepped(opts) {\n\tconst align = ifNull(opts.align, 1);\n\t// whether to draw ascenders/descenders at null/gap bondaries\n\tconst ascDesc = ifNull(opts.ascDesc, false);\n\tconst alignGaps = ifNull(opts.alignGaps, 0);\n\tconst extend = ifNull(opts.extend, false);\n\n\treturn (u, seriesIdx, idx0, idx1) => {\n\t\treturn orient(u, seriesIdx, (series, dataX, dataY, scaleX, scaleY, valToPosX, valToPosY, xOff, yOff, xDim, yDim) => {\n\t\t\tlet pxRound = series.pxRound;\n\n\t\t\tlet { left, width } = u.bbox;\n\n\t\t\tlet pixelForX = val => pxRound(valToPosX(val, scaleX, xDim, xOff));\n\t\t\tlet pixelForY = val => pxRound(valToPosY(val, scaleY, yDim, yOff));\n\n\t\t\tlet lineTo = scaleX.ori == 0 ? lineToH : lineToV;\n\n\t\t\tconst _paths = {stroke: new Path2D(), fill: null, clip: null, band: null, gaps: null, flags: BAND_CLIP_FILL};\n\t\t\tconst stroke = _paths.stroke;\n\n\t\t\tconst dir = scaleX.dir * (scaleX.ori == 0 ? 1 : -1);\n\n\t\t\tidx0 = nonNullIdx(dataY, idx0, idx1,  1);\n\t\t\tidx1 = nonNullIdx(dataY, idx0, idx1, -1);\n\n\t\t\tlet prevYPos  = pixelForY(dataY[dir == 1 ? idx0 : idx1]);\n\t\t\tlet firstXPos = pixelForX(dataX[dir == 1 ? idx0 : idx1]);\n\t\t\tlet prevXPos = firstXPos;\n\n\t\t\tlet firstXPosExt = firstXPos;\n\n\t\t\tif (extend && align == -1) {\n\t\t\t\tfirstXPosExt = left;\n\t\t\t\tlineTo(stroke, firstXPosExt, prevYPos);\n\t\t\t}\n\n\t\t\tlineTo(stroke, firstXPos, prevYPos);\n\n\t\t\tfor (let i = dir == 1 ? idx0 : idx1; i >= idx0 && i <= idx1; i += dir) {\n\t\t\t\tlet yVal1 = dataY[i];\n\n\t\t\t\tif (yVal1 == null)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tlet x1 = pixelForX(dataX[i]);\n\t\t\t\tlet y1 = pixelForY(yVal1);\n\n\t\t\t\tif (align == 1)\n\t\t\t\t\tlineTo(stroke, x1, prevYPos);\n\t\t\t\telse\n\t\t\t\t\tlineTo(stroke, prevXPos, y1);\n\n\t\t\t\tlineTo(stroke, x1, y1);\n\n\t\t\t\tprevYPos = y1;\n\t\t\t\tprevXPos = x1;\n\t\t\t}\n\n\t\t\tlet prevXPosExt = prevXPos;\n\n\t\t\tif (extend && align == 1) {\n\t\t\t\tprevXPosExt = left + width;\n\t\t\t\tlineTo(stroke, prevXPosExt, prevYPos);\n\t\t\t}\n\n\t\t\tlet [ bandFillDir, bandClipDir ] = bandFillClipDirs(u, seriesIdx);\n\n\t\t\tif (series.fill != null || bandFillDir != 0) {\n\t\t\t\tlet fill = _paths.fill = new Path2D(stroke);\n\n\t\t\t\tlet fillTo = series.fillTo(u, seriesIdx, series.min, series.max, bandFillDir);\n\t\t\t\tlet fillToY = pixelForY(fillTo);\n\n\t\t\t\tlineTo(fill, prevXPosExt, fillToY);\n\t\t\t\tlineTo(fill, firstXPosExt, fillToY);\n\t\t\t}\n\n\t\t\tif (!series.spanGaps) {\n\t\t\t//\tconsole.time('gaps');\n\t\t\t\tlet gaps = [];\n\n\t\t\t\tgaps.push(...findGaps(dataX, dataY, idx0, idx1, dir, pixelForX, alignGaps));\n\n\t\t\t//\tconsole.timeEnd('gaps');\n\n\t\t\t//\tconsole.log('gaps', JSON.stringify(gaps));\n\n\t\t\t\t// expand/contract clips for ascenders/descenders\n\t\t\t\tlet halfStroke = (series.width * pxRatio) / 2;\n\t\t\t\tlet startsOffset = (ascDesc || align ==  1) ?  halfStroke : -halfStroke;\n\t\t\t\tlet endsOffset   = (ascDesc || align == -1) ? -halfStroke :  halfStroke;\n\n\t\t\t\tgaps.forEach(g => {\n\t\t\t\t\tg[0] += startsOffset;\n\t\t\t\t\tg[1] += endsOffset;\n\t\t\t\t});\n\n\t\t\t\t_paths.gaps = gaps = series.gaps(u, seriesIdx, idx0, idx1, gaps);\n\n\t\t\t\t_paths.clip = clipGaps(gaps, scaleX.ori, xOff, yOff, xDim, yDim);\n\t\t\t}\n\n\t\t\tif (bandClipDir != 0) {\n\t\t\t\t_paths.band = bandClipDir == 2 ? [\n\t\t\t\t\tclipBandLine(u, seriesIdx, idx0, idx1, stroke, -1),\n\t\t\t\t\tclipBandLine(u, seriesIdx, idx0, idx1, stroke,  1),\n\t\t\t\t] : clipBandLine(u, seriesIdx, idx0, idx1, stroke, bandClipDir);\n\t\t\t}\n\n\t\t\treturn _paths;\n\t\t});\n\t};\n}\n\nfunction bars(opts) {\n\topts = opts || EMPTY_OBJ;\n\tconst size = ifNull(opts.size, [0.6, inf, 1]);\n\tconst align = opts.align || 0;\n\tconst extraGap = (opts.gap || 0) * pxRatio;\n\n\tlet ro = opts.radius;\n\n\tro =\n\t\t// [valueRadius, baselineRadius]\n\t\tro == null ? [0, 0] :\n\t\ttypeof ro == 'number' ? [ro, 0] : ro;\n\n\tconst radiusFn = fnOrSelf(ro);\n\n\tconst gapFactor = 1 - size[0];\n\tconst maxWidth  = ifNull(size[1], inf) * pxRatio;\n\tconst minWidth  = ifNull(size[2], 1) * pxRatio;\n\n\tconst disp = ifNull(opts.disp, EMPTY_OBJ);\n\tconst _each = ifNull(opts.each, _ => {});\n\n\tconst { fill: dispFills, stroke: dispStrokes } = disp;\n\n\treturn (u, seriesIdx, idx0, idx1) => {\n\t\treturn orient(u, seriesIdx, (series, dataX, dataY, scaleX, scaleY, valToPosX, valToPosY, xOff, yOff, xDim, yDim) => {\n\t\t\tlet pxRound = series.pxRound;\n\n\t\t\tlet valRadius, baseRadius;\n\n\t\t\tif (scaleX.ori == 0)\n\t\t\t\t[valRadius, baseRadius] = radiusFn(u, seriesIdx);\n\t\t\telse\n\t\t\t\t[baseRadius, valRadius] = radiusFn(u, seriesIdx);\n\n\t\t\tconst _dirX = scaleX.dir * (scaleX.ori == 0 ? 1 : -1);\n\t\t\tconst _dirY = scaleY.dir * (scaleY.ori == 1 ? 1 : -1);\n\n\t\t\tlet rect = scaleX.ori == 0 ? rectH : rectV;\n\n\t\t\tlet each = scaleX.ori == 0 ? _each : (u, seriesIdx, i, top, lft, hgt, wid) => {\n\t\t\t\t_each(u, seriesIdx, i, lft, top, wid, hgt);\n\t\t\t};\n\n\t\t\tlet [ bandFillDir, bandClipDir ] = bandFillClipDirs(u, seriesIdx);\n\n\t\t//\tlet fillToY = series.fillTo(u, seriesIdx, series.min, series.max, bandFillDir);\n\t\t\tlet fillToY = scaleY.distr == 3 ? (bandFillDir == 1 ? scaleY.max : scaleY.min) : 0;\n\n\t\t\tlet y0Pos = valToPosY(fillToY, scaleY, yDim, yOff);\n\n\t\t\t// barWid is to center of stroke\n\t\t\tlet xShift, barWid;\n\n\t\t\tlet strokeWidth = pxRound(series.width * pxRatio);\n\n\t\t\tlet multiPath = false;\n\n\t\t\tlet fillColors = null;\n\t\t\tlet fillPaths = null;\n\t\t\tlet strokeColors = null;\n\t\t\tlet strokePaths = null;\n\n\t\t\tif (dispFills != null && (strokeWidth == 0 || dispStrokes != null)) {\n\t\t\t\tmultiPath = true;\n\n\t\t\t\tfillColors = dispFills.values(u, seriesIdx, idx0, idx1);\n\t\t\t\tfillPaths = new Map();\n\t\t\t\t(new Set(fillColors)).forEach(color => {\n\t\t\t\t\tif (color != null)\n\t\t\t\t\t\tfillPaths.set(color, new Path2D());\n\t\t\t\t});\n\n\t\t\t\tif (strokeWidth > 0) {\n\t\t\t\t\tstrokeColors = dispStrokes.values(u, seriesIdx, idx0, idx1);\n\t\t\t\t\tstrokePaths = new Map();\n\t\t\t\t\t(new Set(strokeColors)).forEach(color => {\n\t\t\t\t\t\tif (color != null)\n\t\t\t\t\t\t\tstrokePaths.set(color, new Path2D());\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet { x0, size } = disp;\n\n\t\t\tif (x0 != null && size != null) {\n\t\t\t\tdataX = x0.values(u, seriesIdx, idx0, idx1);\n\n\t\t\t\tif (x0.unit == 2)\n\t\t\t\t\tdataX = dataX.map(pct => u.posToVal(xOff + pct * xDim, scaleX.key, true));\n\n\t\t\t\t// assumes uniform sizes, for now\n\t\t\t\tlet sizes = size.values(u, seriesIdx, idx0, idx1);\n\n\t\t\t\tif (size.unit == 2)\n\t\t\t\t\tbarWid = sizes[0] * xDim;\n\t\t\t\telse\n\t\t\t\t\tbarWid = valToPosX(sizes[0], scaleX, xDim, xOff) - valToPosX(0, scaleX, xDim, xOff); // assumes linear scale (delta from 0)\n\n\t\t\t\tbarWid = pxRound(barWid - strokeWidth);\n\n\t\t\t\txShift = (_dirX == 1 ? -strokeWidth / 2 : barWid + strokeWidth / 2);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet colWid = xDim;\n\n\t\t\t\tif (dataX.length > 1) {\n\t\t\t\t\t// prior index with non-undefined y data\n\t\t\t\t\tlet prevIdx = null;\n\n\t\t\t\t\t// scan full dataset for smallest adjacent delta\n\t\t\t\t\t// will not work properly for non-linear x scales, since does not do expensive valToPosX calcs till end\n\t\t\t\t\tfor (let i = 0, minDelta = Infinity; i < dataX.length; i++) {\n\t\t\t\t\t\tif (dataY[i] !== undefined) {\n\t\t\t\t\t\t\tif (prevIdx != null) {\n\t\t\t\t\t\t\t\tlet delta = abs(dataX[i] - dataX[prevIdx]);\n\n\t\t\t\t\t\t\t\tif (delta < minDelta) {\n\t\t\t\t\t\t\t\t\tminDelta = delta;\n\t\t\t\t\t\t\t\t\tcolWid = abs(valToPosX(dataX[i], scaleX, xDim, xOff) - valToPosX(dataX[prevIdx], scaleX, xDim, xOff));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tprevIdx = i;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tlet gapWid = colWid * gapFactor;\n\n\t\t\t\tbarWid = pxRound(min(maxWidth, max(minWidth, colWid - gapWid)) - strokeWidth - extraGap);\n\n\t\t\t\txShift = (align == 0 ? barWid / 2 : align == _dirX ? 0 : barWid) - align * _dirX * extraGap / 2;\n\t\t\t}\n\n\t\t\tconst _paths = {stroke: null, fill: null, clip: null, band: null, gaps: null, flags: BAND_CLIP_FILL | BAND_CLIP_STROKE};  // disp, geom\n\n\t\t\tlet yLimit;\n\n\t\t\tif (bandClipDir != 0) {\n\t\t\t\t_paths.band = new Path2D();\n\t\t\t\tyLimit = pxRound(valToPosY(bandClipDir == 1 ? scaleY.max : scaleY.min, scaleY, yDim, yOff));\n\t\t\t}\n\n\t\t\tconst stroke = multiPath ? null : new Path2D();\n\t\t\tconst band = _paths.band;\n\n\t\t\tlet { y0, y1 } = disp;\n\n\t\t\tlet dataY0 = null;\n\n\t\t\tif (y0 != null && y1 != null) {\n\t\t\t\tdataY = y1.values(u, seriesIdx, idx0, idx1);\n\t\t\t\tdataY0 = y0.values(u, seriesIdx, idx0, idx1);\n\t\t\t}\n\n\t\t\tlet radVal = valRadius * barWid;\n\t\t\tlet radBase = baseRadius * barWid;\n\n\t\t\tfor (let i = _dirX == 1 ? idx0 : idx1; i >= idx0 && i <= idx1; i += _dirX) {\n\t\t\t\tlet yVal = dataY[i];\n\n\t\t\t\t// we can skip both, drawing and band clipping for alignment artifacts\n\t\t\t\tif (yVal === undefined)\n\t\t\t\t\tcontinue;\n\n\t\t\t/*\n\t\t\t\t// interpolate upwards band clips\n\t\t\t\tif (yVal == null) {\n\t\t\t\t//\tif (hasBands)\n\t\t\t\t//\t\tyVal = costlyLerp(i, idx0, idx1, _dirX, dataY);\n\t\t\t\t//\telse\n\t\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t*/\n\n\t\t\t\tlet xVal = scaleX.distr != 2 || disp != null ? dataX[i] : i;\n\n\t\t\t\t// TODO: all xPos can be pre-computed once for all series in aligned set\n\t\t\t\tlet xPos = valToPosX(xVal, scaleX, xDim, xOff);\n\t\t\t\tlet yPos = valToPosY(ifNull(yVal, fillToY), scaleY, yDim, yOff);\n\n\t\t\t\tif (dataY0 != null && yVal != null)\n\t\t\t\t\ty0Pos = valToPosY(dataY0[i], scaleY, yDim, yOff);\n\n\t\t\t\tlet lft = pxRound(xPos - xShift);\n\t\t\t\tlet btm = pxRound(max(yPos, y0Pos));\n\t\t\t\tlet top = pxRound(min(yPos, y0Pos));\n\t\t\t\t// this includes the stroke\n\t\t\t\tlet barHgt = btm - top;\n\n\t\t\t\tif (yVal != null) {  // && yVal != fillToY (0 height bar)\n\t\t\t\t\tlet rv = yVal < 0 ? radBase : radVal;\n\t\t\t\t\tlet rb = yVal < 0 ? radVal : radBase;\n\n\t\t\t\t\tif (multiPath) {\n\t\t\t\t\t\tif (strokeWidth > 0 && strokeColors[i] != null)\n\t\t\t\t\t\t\trect(strokePaths.get(strokeColors[i]), lft, top + floor(strokeWidth / 2), barWid, max(0, barHgt - strokeWidth), rv, rb);\n\n\t\t\t\t\t\tif (fillColors[i] != null)\n\t\t\t\t\t\t\trect(fillPaths.get(fillColors[i]), lft, top + floor(strokeWidth / 2), barWid, max(0, barHgt - strokeWidth), rv, rb);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\trect(stroke, lft, top + floor(strokeWidth / 2), barWid, max(0, barHgt - strokeWidth), rv, rb);\n\n\t\t\t\t\teach(u, seriesIdx, i,\n\t\t\t\t\t\tlft    - strokeWidth / 2,\n\t\t\t\t\t\ttop,\n\t\t\t\t\t\tbarWid + strokeWidth,\n\t\t\t\t\t\tbarHgt,\n\t\t\t\t\t);\n\t\t\t\t}\n\n\t\t\t\tif (bandClipDir != 0) {\n\t\t\t\t\tif (_dirY * bandClipDir == 1) {\n\t\t\t\t\t\tbtm = top;\n\t\t\t\t\t\ttop = yLimit;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ttop = btm;\n\t\t\t\t\t\tbtm = yLimit;\n\t\t\t\t\t}\n\n\t\t\t\t\tbarHgt = btm - top;\n\n\t\t\t\t\trect(band, lft - strokeWidth / 2, top, barWid + strokeWidth, max(0, barHgt), 0, 0);  // radius here?\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (strokeWidth > 0)\n\t\t\t\t_paths.stroke = multiPath ? strokePaths : stroke;\n\n\t\t\t_paths.fill = multiPath ? fillPaths : stroke;\n\n\t\t\treturn _paths;\n\t\t});\n\t};\n}\n\nfunction splineInterp(interp, opts) {\n\tconst alignGaps = ifNull(opts?.alignGaps, 0);\n\n\treturn (u, seriesIdx, idx0, idx1) => {\n\t\treturn orient(u, seriesIdx, (series, dataX, dataY, scaleX, scaleY, valToPosX, valToPosY, xOff, yOff, xDim, yDim) => {\n\t\t\tlet pxRound = series.pxRound;\n\n\t\t\tlet pixelForX = val => pxRound(valToPosX(val, scaleX, xDim, xOff));\n\t\t\tlet pixelForY = val => pxRound(valToPosY(val, scaleY, yDim, yOff));\n\n\t\t\tlet moveTo, bezierCurveTo, lineTo;\n\n\t\t\tif (scaleX.ori == 0) {\n\t\t\t\tmoveTo = moveToH;\n\t\t\t\tlineTo = lineToH;\n\t\t\t\tbezierCurveTo = bezierCurveToH;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmoveTo = moveToV;\n\t\t\t\tlineTo = lineToV;\n\t\t\t\tbezierCurveTo = bezierCurveToV;\n\t\t\t}\n\n\t\t\tconst dir = scaleX.dir * (scaleX.ori == 0 ? 1 : -1);\n\n\t\t\tidx0 = nonNullIdx(dataY, idx0, idx1,  1);\n\t\t\tidx1 = nonNullIdx(dataY, idx0, idx1, -1);\n\n\t\t\tlet firstXPos = pixelForX(dataX[dir == 1 ? idx0 : idx1]);\n\t\t\tlet prevXPos = firstXPos;\n\n\t\t\tlet xCoords = [];\n\t\t\tlet yCoords = [];\n\n\t\t\tfor (let i = dir == 1 ? idx0 : idx1; i >= idx0 && i <= idx1; i += dir) {\n\t\t\t\tlet yVal = dataY[i];\n\n\t\t\t\tif (yVal != null) {\n\t\t\t\t\tlet xVal = dataX[i];\n\t\t\t\t\tlet xPos = pixelForX(xVal);\n\n\t\t\t\t\txCoords.push(prevXPos = xPos);\n\t\t\t\t\tyCoords.push(pixelForY(dataY[i]));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst _paths = {stroke: interp(xCoords, yCoords, moveTo, lineTo, bezierCurveTo, pxRound), fill: null, clip: null, band: null, gaps: null, flags: BAND_CLIP_FILL};\n\t\t\tconst stroke = _paths.stroke;\n\n\t\t\tlet [ bandFillDir, bandClipDir ] = bandFillClipDirs(u, seriesIdx);\n\n\t\t\tif (series.fill != null || bandFillDir != 0) {\n\t\t\t\tlet fill = _paths.fill = new Path2D(stroke);\n\n\t\t\t\tlet fillTo = series.fillTo(u, seriesIdx, series.min, series.max, bandFillDir);\n\t\t\t\tlet fillToY = pixelForY(fillTo);\n\n\t\t\t\tlineTo(fill, prevXPos, fillToY);\n\t\t\t\tlineTo(fill, firstXPos, fillToY);\n\t\t\t}\n\n\t\t\tif (!series.spanGaps) {\n\t\t\t//\tconsole.time('gaps');\n\t\t\t\tlet gaps = [];\n\n\t\t\t\tgaps.push(...findGaps(dataX, dataY, idx0, idx1, dir, pixelForX, alignGaps));\n\n\t\t\t//\tconsole.timeEnd('gaps');\n\n\t\t\t//\tconsole.log('gaps', JSON.stringify(gaps));\n\n\t\t\t\t_paths.gaps = gaps = series.gaps(u, seriesIdx, idx0, idx1, gaps);\n\n\t\t\t\t_paths.clip = clipGaps(gaps, scaleX.ori, xOff, yOff, xDim, yDim);\n\t\t\t}\n\n\t\t\tif (bandClipDir != 0) {\n\t\t\t\t_paths.band = bandClipDir == 2 ? [\n\t\t\t\t\tclipBandLine(u, seriesIdx, idx0, idx1, stroke, -1),\n\t\t\t\t\tclipBandLine(u, seriesIdx, idx0, idx1, stroke,  1),\n\t\t\t\t] : clipBandLine(u, seriesIdx, idx0, idx1, stroke, bandClipDir);\n\t\t\t}\n\n\t\t\treturn _paths;\n\n\t\t\t//  if FEAT_PATHS: false in rollup.config.js\n\t\t\t//\tu.ctx.save();\n\t\t\t//\tu.ctx.beginPath();\n\t\t\t//\tu.ctx.rect(u.bbox.left, u.bbox.top, u.bbox.width, u.bbox.height);\n\t\t\t//\tu.ctx.clip();\n\t\t\t//\tu.ctx.strokeStyle = u.series[sidx].stroke;\n\t\t\t//\tu.ctx.stroke(stroke);\n\t\t\t//\tu.ctx.fillStyle = u.series[sidx].fill;\n\t\t\t//\tu.ctx.fill(fill);\n\t\t\t//\tu.ctx.restore();\n\t\t\t//\treturn null;\n\t\t});\n\t};\n}\n\nfunction monotoneCubic(opts) {\n\treturn splineInterp(_monotoneCubic, opts);\n}\n\n// Monotone Cubic Spline interpolation, adapted from the Chartist.js implementation:\n// https://github.com/gionkunz/chartist-js/blob/e7e78201bffe9609915e5e53cfafa29a5d6c49f9/src/scripts/interpolation.js#L240-L369\nfunction _monotoneCubic(xs, ys, moveTo, lineTo, bezierCurveTo, pxRound) {\n\tconst n = xs.length;\n\n\tif (n < 2)\n\t\treturn null;\n\n\tconst path = new Path2D();\n\n\tmoveTo(path, xs[0], ys[0]);\n\n\tif (n == 2)\n\t\tlineTo(path, xs[1], ys[1]);\n\telse {\n\t\tlet ms  = Array(n),\n\t\t\tds  = Array(n - 1),\n\t\t\tdys = Array(n - 1),\n\t\t\tdxs = Array(n - 1);\n\n\t\t// calc deltas and derivative\n\t\tfor (let i = 0; i < n - 1; i++) {\n\t\t\tdys[i] = ys[i + 1] - ys[i];\n\t\t\tdxs[i] = xs[i + 1] - xs[i];\n\t\t\tds[i]  = dys[i] / dxs[i];\n\t\t}\n\n\t\t// determine desired slope (m) at each point using Fritsch-Carlson method\n\t\t// http://math.stackexchange.com/questions/45218/implementation-of-monotone-cubic-interpolation\n\t\tms[0] = ds[0];\n\n\t\tfor (let i = 1; i < n - 1; i++) {\n\t\t\tif (ds[i] === 0 || ds[i - 1] === 0 || (ds[i - 1] > 0) !== (ds[i] > 0))\n\t\t\t\tms[i] = 0;\n\t\t\telse {\n\t\t\t\tms[i] = 3 * (dxs[i - 1] + dxs[i]) / (\n\t\t\t\t\t(2 * dxs[i] + dxs[i - 1]) / ds[i - 1] +\n\t\t\t\t\t(dxs[i] + 2 * dxs[i - 1]) / ds[i]\n\t\t\t\t);\n\n\t\t\t\tif (!isFinite(ms[i]))\n\t\t\t\t\tms[i] = 0;\n\t\t\t}\n\t\t}\n\n\t\tms[n - 1] = ds[n - 2];\n\n\t\tfor (let i = 0; i < n - 1; i++) {\n\t\t\tbezierCurveTo(\n\t\t\t\tpath,\n\t\t\t\txs[i] + dxs[i] / 3,\n\t\t\t\tys[i] + ms[i] * dxs[i] / 3,\n\t\t\t\txs[i + 1] - dxs[i] / 3,\n\t\t\t\tys[i + 1] - ms[i + 1] * dxs[i] / 3,\n\t\t\t\txs[i + 1],\n\t\t\t\tys[i + 1],\n\t\t\t);\n\t\t}\n\t}\n\n\treturn path;\n}\n\nconst cursorPlots = new Set();\n\nfunction invalidateRects() {\n\tfor (let u of cursorPlots)\n\t\tu.syncRect(true);\n}\n\nif (domEnv) {\n\ton(resize, win, invalidateRects);\n\ton(scroll, win, invalidateRects, true);\n\ton(dppxchange, win, () => { uPlot.pxRatio = pxRatio; });\n}\n\nconst linearPath = linear() ;\nconst pointsPath = points() ;\n\nfunction setDefaults(d, xo, yo, initY) {\n\tlet d2 = initY ? [d[0], d[1]].concat(d.slice(2)) : [d[0]].concat(d.slice(1));\n\treturn d2.map((o, i) => setDefault(o, i, xo, yo));\n}\n\nfunction setDefaults2(d, xyo) {\n\treturn d.map((o, i) => i == 0 ? null : assign({}, xyo, o));  // todo: assign() will not merge facet arrays\n}\n\nfunction setDefault(o, i, xo, yo) {\n\treturn assign({}, (i == 0 ? xo : yo), o);\n}\n\nfunction snapNumX(self, dataMin, dataMax) {\n\treturn dataMin == null ? nullNullTuple : [dataMin, dataMax];\n}\n\nconst snapTimeX = snapNumX;\n\n// this ensures that non-temporal/numeric y-axes get multiple-snapped padding added above/below\n// TODO: also account for incrs when snapping to ensure top of axis gets a tick & value\nfunction snapNumY(self, dataMin, dataMax) {\n\treturn dataMin == null ? nullNullTuple : rangeNum(dataMin, dataMax, rangePad, true);\n}\n\nfunction snapLogY(self, dataMin, dataMax, scale) {\n\treturn dataMin == null ? nullNullTuple : rangeLog(dataMin, dataMax, self.scales[scale].log, false);\n}\n\nconst snapLogX = snapLogY;\n\nfunction snapAsinhY(self, dataMin, dataMax, scale) {\n\treturn dataMin == null ? nullNullTuple : rangeAsinh(dataMin, dataMax, self.scales[scale].log, false);\n}\n\nconst snapAsinhX = snapAsinhY;\n\n// dim is logical (getClientBoundingRect) pixels, not canvas pixels\nfunction findIncr(minVal, maxVal, incrs, dim, minSpace) {\n\tlet intDigits = max(numIntDigits(minVal), numIntDigits(maxVal));\n\n\tlet delta = maxVal - minVal;\n\n\tlet incrIdx = closestIdx((minSpace / dim) * delta, incrs);\n\n\tdo {\n\t\tlet foundIncr = incrs[incrIdx];\n\t\tlet foundSpace = dim * foundIncr / delta;\n\n\t\tif (foundSpace >= minSpace && intDigits + (foundIncr < 5 ? fixedDec.get(foundIncr) : 0) <= 17)\n\t\t\treturn [foundIncr, foundSpace];\n\t} while (++incrIdx < incrs.length);\n\n\treturn [0, 0];\n}\n\nfunction pxRatioFont(font) {\n\tlet fontSize, fontSizeCss;\n\tfont = font.replace(/(\\d+)px/, (m, p1) => (fontSize = round((fontSizeCss = +p1) * pxRatio)) + 'px');\n\treturn [font, fontSize, fontSizeCss];\n}\n\nfunction syncFontSize(axis) {\n\tif (axis.show) {\n\t\t[axis.font, axis.labelFont].forEach(f => {\n\t\t\tlet size = roundDec(f[2] * pxRatio, 1);\n\t\t\tf[0] = f[0].replace(/[0-9.]+px/, size + 'px');\n\t\t\tf[1] = size;\n\t\t});\n\t}\n}\n\nfunction uPlot(opts, data, then) {\n\tconst self = {\n\t\tmode: ifNull(opts.mode, 1),\n\t};\n\n\tconst mode = self.mode;\n\n\t// TODO: cache denoms & mins scale.cache = {r, min, }\n\tfunction getValPct(val, scale) {\n\t\tlet _val = (\n\t\t\tscale.distr == 3 ? log10(val > 0 ? val : scale.clamp(self, val, scale.min, scale.max, scale.key)) :\n\t\t\tscale.distr == 4 ? asinh(val, scale.asinh) :\n\t\t\tval\n\t\t);\n\n\t\treturn (_val - scale._min) / (scale._max - scale._min);\n\t}\n\n\tfunction getHPos(val, scale, dim, off) {\n\t\tlet pct = getValPct(val, scale);\n\t\treturn off + dim * (scale.dir == -1 ? (1 - pct) : pct);\n\t}\n\n\tfunction getVPos(val, scale, dim, off) {\n\t\tlet pct = getValPct(val, scale);\n\t\treturn off + dim * (scale.dir == -1 ? pct : (1 - pct));\n\t}\n\n\tfunction getPos(val, scale, dim, off) {\n\t\treturn scale.ori == 0 ? getHPos(val, scale, dim, off) : getVPos(val, scale, dim, off);\n\t}\n\n\tself.valToPosH = getHPos;\n\tself.valToPosV = getVPos;\n\n\tlet ready = false;\n\tself.status = 0;\n\n\tconst root = self.root = placeDiv(UPLOT);\n\n\tif (opts.id != null)\n\t\troot.id = opts.id;\n\n\taddClass(root, opts.class);\n\n\tif (opts.title) {\n\t\tlet title = placeDiv(TITLE, root);\n\t\ttitle.textContent = opts.title;\n\t}\n\n\tconst can = placeTag(\"canvas\");\n\tconst ctx = self.ctx = can.getContext(\"2d\");\n\n\tconst wrap = placeDiv(WRAP, root);\n\n\ton(\"click\", wrap, e => {\n\t\tlet didDrag = mouseLeft1 != mouseLeft0 || mouseTop1 != mouseTop0;\n\t\tdidDrag && drag.click(self, e);\n\t}, true);\n\n\tconst under = self.under = placeDiv(UNDER, wrap);\n\twrap.appendChild(can);\n\tconst over = self.over = placeDiv(OVER, wrap);\n\n\topts = copy(opts);\n\n\tconst pxAlign = +ifNull(opts.pxAlign, 1);\n\n\tconst pxRound = pxRoundGen(pxAlign);\n\n\t(opts.plugins || []).forEach(p => {\n\t\tif (p.opts)\n\t\t\topts = p.opts(self, opts) || opts;\n\t});\n\n\tconst ms = opts.ms || 1e-3;\n\n\tconst series  = self.series = mode == 1 ?\n\t\tsetDefaults(opts.series || [], xSeriesOpts, ySeriesOpts, false) :\n\t\tsetDefaults2(opts.series || [null], xySeriesOpts);\n\tconst axes    = self.axes   = setDefaults(opts.axes   || [], xAxisOpts,   yAxisOpts,    true);\n\tconst scales  = self.scales = {};\n\tconst bands   = self.bands  = opts.bands || [];\n\n\tbands.forEach(b => {\n\t\tb.fill = fnOrSelf(b.fill || null);\n\t\tb.dir = ifNull(b.dir, -1);\n\t});\n\n\tconst xScaleKey = mode == 2 ? series[1].facets[0].scale : series[0].scale;\n\n\tconst drawOrderMap = {\n\t\taxes: drawAxesGrid,\n\t\tseries: drawSeries,\n\t};\n\n\tconst drawOrder = (opts.drawOrder || [\"axes\", \"series\"]).map(key => drawOrderMap[key]);\n\n\tfunction initScale(scaleKey) {\n\t\tlet sc = scales[scaleKey];\n\n\t\tif (sc == null) {\n\t\t\tlet scaleOpts = (opts.scales || EMPTY_OBJ)[scaleKey] || EMPTY_OBJ;\n\n\t\t\tif (scaleOpts.from != null) {\n\t\t\t\t// ensure parent is initialized\n\t\t\t\tinitScale(scaleOpts.from);\n\t\t\t\t// dependent scales inherit\n\t\t\t\tscales[scaleKey] = assign({}, scales[scaleOpts.from], scaleOpts, {key: scaleKey});\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsc = scales[scaleKey] = assign({}, (scaleKey == xScaleKey ? xScaleOpts : yScaleOpts), scaleOpts);\n\n\t\t\t\tsc.key = scaleKey;\n\n\t\t\t\tlet isTime = sc.time;\n\n\t\t\t\tlet rn = sc.range;\n\n\t\t\t\tlet rangeIsArr = isArr(rn);\n\n\t\t\t\tif (scaleKey != xScaleKey || (mode == 2 && !isTime)) {\n\t\t\t\t\t// if range array has null limits, it should be auto\n\t\t\t\t\tif (rangeIsArr && (rn[0] == null || rn[1] == null)) {\n\t\t\t\t\t\trn = {\n\t\t\t\t\t\t\tmin: rn[0] == null ? autoRangePart : {\n\t\t\t\t\t\t\t\tmode: 1,\n\t\t\t\t\t\t\t\thard: rn[0],\n\t\t\t\t\t\t\t\tsoft: rn[0],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tmax: rn[1] == null ? autoRangePart : {\n\t\t\t\t\t\t\t\tmode: 1,\n\t\t\t\t\t\t\t\thard: rn[1],\n\t\t\t\t\t\t\t\tsoft: rn[1],\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t};\n\t\t\t\t\t\trangeIsArr = false;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!rangeIsArr && isObj(rn)) {\n\t\t\t\t\t\tlet cfg = rn;\n\t\t\t\t\t\t// this is similar to snapNumY\n\t\t\t\t\t\trn = (self, dataMin, dataMax) => dataMin == null ? nullNullTuple : rangeNum(dataMin, dataMax, cfg);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tsc.range = fnOrSelf(rn || (isTime ? snapTimeX : scaleKey == xScaleKey ?\n\t\t\t\t\t(sc.distr == 3 ? snapLogX : sc.distr == 4 ? snapAsinhX : snapNumX) :\n\t\t\t\t\t(sc.distr == 3 ? snapLogY : sc.distr == 4 ? snapAsinhY : snapNumY)\n\t\t\t\t));\n\n\t\t\t\tsc.auto = fnOrSelf(rangeIsArr ? false : sc.auto);\n\n\t\t\t\tsc.clamp = fnOrSelf(sc.clamp || clampScale);\n\n\t\t\t\t// caches for expensive ops like asinh() & log()\n\t\t\t\tsc._min = sc._max = null;\n\t\t\t}\n\t\t}\n\t}\n\n\tinitScale(\"x\");\n\tinitScale(\"y\");\n\n\t// TODO: init scales from facets in mode: 2\n\tif (mode == 1) {\n\t\tseries.forEach(s => {\n\t\t\tinitScale(s.scale);\n\t\t});\n\t}\n\n\taxes.forEach(a => {\n\t\tinitScale(a.scale);\n\t});\n\n\tfor (let k in opts.scales)\n\t\tinitScale(k);\n\n\tconst scaleX = scales[xScaleKey];\n\n\tconst xScaleDistr = scaleX.distr;\n\n\tlet valToPosX, valToPosY;\n\n\tif (scaleX.ori == 0) {\n\t\taddClass(root, ORI_HZ);\n\t\tvalToPosX = getHPos;\n\t\tvalToPosY = getVPos;\n\t\t/*\n\t\tupdOriDims = () => {\n\t\t\txDimCan = plotWid;\n\t\t\txOffCan = plotLft;\n\t\t\tyDimCan = plotHgt;\n\t\t\tyOffCan = plotTop;\n\n\t\t\txDimCss = plotWidCss;\n\t\t\txOffCss = plotLftCss;\n\t\t\tyDimCss = plotHgtCss;\n\t\t\tyOffCss = plotTopCss;\n\t\t};\n\t\t*/\n\t}\n\telse {\n\t\taddClass(root, ORI_VT);\n\t\tvalToPosX = getVPos;\n\t\tvalToPosY = getHPos;\n\t\t/*\n\t\tupdOriDims = () => {\n\t\t\txDimCan = plotHgt;\n\t\t\txOffCan = plotTop;\n\t\t\tyDimCan = plotWid;\n\t\t\tyOffCan = plotLft;\n\n\t\t\txDimCss = plotHgtCss;\n\t\t\txOffCss = plotTopCss;\n\t\t\tyDimCss = plotWidCss;\n\t\t\tyOffCss = plotLftCss;\n\t\t};\n\t\t*/\n\t}\n\n\tconst pendScales = {};\n\n\t// explicitly-set initial scales\n\tfor (let k in scales) {\n\t\tlet sc = scales[k];\n\n\t\tif (sc.min != null || sc.max != null) {\n\t\t\tpendScales[k] = {min: sc.min, max: sc.max};\n\t\t\tsc.min = sc.max = null;\n\t\t}\n\t}\n\n//\tself.tz = opts.tz || Intl.DateTimeFormat().resolvedOptions().timeZone;\n\tconst _tzDate  = (opts.tzDate || (ts => new Date(round(ts / ms))));\n\tconst _fmtDate = (opts.fmtDate || fmtDate);\n\n\tconst _timeAxisSplits = (ms == 1 ? timeAxisSplitsMs(_tzDate) : timeAxisSplitsS(_tzDate));\n\tconst _timeAxisVals   = timeAxisVals(_tzDate, timeAxisStamps((ms == 1 ? _timeAxisStampsMs : _timeAxisStampsS), _fmtDate));\n\tconst _timeSeriesVal  = timeSeriesVal(_tzDate, timeSeriesStamp(_timeSeriesStamp, _fmtDate));\n\n\tconst activeIdxs = [];\n\n\tconst legend     = (self.legend = assign({}, legendOpts, opts.legend));\n\tconst showLegend = legend.show;\n\tconst markers    = legend.markers;\n\n\t{\n\t\tlegend.idxs = activeIdxs;\n\n\t\tmarkers.width  = fnOrSelf(markers.width);\n\t\tmarkers.dash   = fnOrSelf(markers.dash);\n\t\tmarkers.stroke = fnOrSelf(markers.stroke);\n\t\tmarkers.fill   = fnOrSelf(markers.fill);\n\t}\n\n\tlet legendEl;\n\tlet legendRows = [];\n\tlet legendCells = [];\n\tlet legendCols;\n\tlet multiValLegend = false;\n\tlet NULL_LEGEND_VALUES = {};\n\n\tif (legend.live) {\n\t\tconst getMultiVals = series[1] ? series[1].values : null;\n\t\tmultiValLegend = getMultiVals != null;\n\t\tlegendCols = multiValLegend ? getMultiVals(self, 1, 0) : {_: 0};\n\n\t\tfor (let k in legendCols)\n\t\t\tNULL_LEGEND_VALUES[k] = LEGEND_DISP;\n\t}\n\n\tif (showLegend) {\n\t\tlegendEl = placeTag(\"table\", LEGEND, root);\n\n\t\tlegend.mount(self, legendEl);\n\n\t\tif (multiValLegend) {\n\t\t\tlet head = placeTag(\"tr\", LEGEND_THEAD, legendEl);\n\t\t\tplaceTag(\"th\", null, head);\n\n\t\t\tfor (var key in legendCols)\n\t\t\t\tplaceTag(\"th\", LEGEND_LABEL, head).textContent = key;\n\t\t}\n\t\telse {\n\t\t\taddClass(legendEl, LEGEND_INLINE);\n\t\t\tlegend.live && addClass(legendEl, LEGEND_LIVE);\n\t\t}\n\t}\n\n\tconst son  = {show: true};\n\tconst soff = {show: false};\n\n\tfunction initLegendRow(s, i) {\n\t\tif (i == 0 && (multiValLegend || !legend.live || mode == 2))\n\t\t\treturn nullNullTuple;\n\n\t\tlet cells = [];\n\n\t\tlet row = placeTag(\"tr\", LEGEND_SERIES, legendEl, legendEl.childNodes[i]);\n\n\t\taddClass(row, s.class);\n\n\t\tif (!s.show)\n\t\t\taddClass(row, OFF);\n\n\t\tlet label = placeTag(\"th\", null, row);\n\n\t\tif (markers.show) {\n\t\t\tlet indic = placeDiv(LEGEND_MARKER, label);\n\n\t\t\tif (i > 0) {\n\t\t\t\tlet width  = markers.width(self, i);\n\n\t\t\t\tif (width)\n\t\t\t\t\tindic.style.border = width + \"px \" + markers.dash(self, i) + \" \" + markers.stroke(self, i);\n\n\t\t\t\tindic.style.background = markers.fill(self, i);\n\t\t\t}\n\t\t}\n\n\t\tlet text = placeDiv(LEGEND_LABEL, label);\n\t\ttext.textContent = s.label;\n\n\t\tif (i > 0) {\n\t\t\tif (!markers.show)\n\t\t\t\ttext.style.color = s.width > 0 ? markers.stroke(self, i) : markers.fill(self, i);\n\n\t\t\tonMouse(\"click\", label, e => {\n\t\t\t\tif (cursor._lock)\n\t\t\t\t\treturn;\n\n\t\t\t\tlet seriesIdx = series.indexOf(s);\n\n\t\t\t\tif ((e.ctrlKey || e.metaKey) != legend.isolate) {\n\t\t\t\t\t// if any other series is shown, isolate this one. else show all\n\t\t\t\t\tlet isolate = series.some((s, i) => i > 0 && i != seriesIdx && s.show);\n\n\t\t\t\t\tseries.forEach((s, i) => {\n\t\t\t\t\t\ti > 0 && setSeries(i, isolate ? (i == seriesIdx ? son : soff) : son, true, syncOpts.setSeries);\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tsetSeries(seriesIdx, {show: !s.show}, true, syncOpts.setSeries);\n\t\t\t});\n\n\t\t\tif (cursorFocus) {\n\t\t\t\tonMouse(mouseenter, label, e => {\n\t\t\t\t\tif (cursor._lock)\n\t\t\t\t\t\treturn;\n\n\t\t\t\t\tsetSeries(series.indexOf(s), FOCUS_TRUE, true, syncOpts.setSeries);\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tfor (var key in legendCols) {\n\t\t\tlet v = placeTag(\"td\", LEGEND_VALUE, row);\n\t\t\tv.textContent = \"--\";\n\t\t\tcells.push(v);\n\t\t}\n\n\t\treturn [row, cells];\n\t}\n\n\tconst mouseListeners = new Map();\n\n\tfunction onMouse(ev, targ, fn) {\n\t\tconst targListeners = mouseListeners.get(targ) || {};\n\t\tconst listener = cursor.bind[ev](self, targ, fn);\n\n\t\tif (listener) {\n\t\t\ton(ev, targ, targListeners[ev] = listener);\n\t\t\tmouseListeners.set(targ, targListeners);\n\t\t}\n\t}\n\n\tfunction offMouse(ev, targ, fn) {\n\t\tconst targListeners = mouseListeners.get(targ) || {};\n\n\t\tfor (let k in targListeners) {\n\t\t\tif (ev == null || k == ev) {\n\t\t\t\toff(k, targ, targListeners[k]);\n\t\t\t\tdelete targListeners[k];\n\t\t\t}\n\t\t}\n\n\t\tif (ev == null)\n\t\t\tmouseListeners.delete(targ);\n\t}\n\n\tlet fullWidCss = 0;\n\tlet fullHgtCss = 0;\n\n\tlet plotWidCss = 0;\n\tlet plotHgtCss = 0;\n\n\t// plot margins to account for axes\n\tlet plotLftCss = 0;\n\tlet plotTopCss = 0;\n\n\tlet plotLft = 0;\n\tlet plotTop = 0;\n\tlet plotWid = 0;\n\tlet plotHgt = 0;\n\n\tself.bbox = {};\n\n\tlet shouldSetScales = false;\n\tlet shouldSetSize = false;\n\tlet shouldConvergeSize = false;\n\tlet shouldSetCursor = false;\n\tlet shouldSetSelect = false;\n\tlet shouldSetLegend = false;\n\n\tfunction _setSize(width, height, force) {\n\t\tif (force || (width != self.width || height != self.height))\n\t\t\tcalcSize(width, height);\n\n\t\tresetYSeries(false);\n\n\t\tshouldConvergeSize = true;\n\t\tshouldSetSize = true;\n\n\t\tif (cursor.left >= 0)\n\t\t\tshouldSetCursor = shouldSetLegend = true;\n\n\t\tcommit();\n\t}\n\n\tfunction calcSize(width, height) {\n\t//\tlog(\"calcSize()\", arguments);\n\n\t\tself.width  = fullWidCss = plotWidCss = width;\n\t\tself.height = fullHgtCss = plotHgtCss = height;\n\t\tplotLftCss  = plotTopCss = 0;\n\n\t\tcalcPlotRect();\n\t\tcalcAxesRects();\n\n\t\tlet bb = self.bbox;\n\n\t\tplotLft = bb.left   = incrRound(plotLftCss * pxRatio, 0.5);\n\t\tplotTop = bb.top    = incrRound(plotTopCss * pxRatio, 0.5);\n\t\tplotWid = bb.width  = incrRound(plotWidCss * pxRatio, 0.5);\n\t\tplotHgt = bb.height = incrRound(plotHgtCss * pxRatio, 0.5);\n\n\t//\tupdOriDims();\n\t}\n\n\t// ensures size calc convergence\n\tconst CYCLE_LIMIT = 3;\n\n\tfunction convergeSize() {\n\t\tlet converged = false;\n\n\t\tlet cycleNum = 0;\n\n\t\twhile (!converged) {\n\t\t\tcycleNum++;\n\n\t\t\tlet axesConverged = axesCalc(cycleNum);\n\t\t\tlet paddingConverged = paddingCalc(cycleNum);\n\n\t\t\tconverged = cycleNum == CYCLE_LIMIT || (axesConverged && paddingConverged);\n\n\t\t\tif (!converged) {\n\t\t\t\tcalcSize(self.width, self.height);\n\t\t\t\tshouldSetSize = true;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction setSize({width, height}) {\n\t\t_setSize(width, height);\n\t}\n\n\tself.setSize = setSize;\n\n\t// accumulate axis offsets, reduce canvas width\n\tfunction calcPlotRect() {\n\t\t// easements for edge labels\n\t\tlet hasTopAxis = false;\n\t\tlet hasBtmAxis = false;\n\t\tlet hasRgtAxis = false;\n\t\tlet hasLftAxis = false;\n\n\t\taxes.forEach((axis, i) => {\n\t\t\tif (axis.show && axis._show) {\n\t\t\t\tlet {side, _size} = axis;\n\t\t\t\tlet isVt = side % 2;\n\t\t\t\tlet labelSize = axis.label != null ? axis.labelSize : 0;\n\n\t\t\t\tlet fullSize = _size + labelSize;\n\n\t\t\t\tif (fullSize > 0) {\n\t\t\t\t\tif (isVt) {\n\t\t\t\t\t\tplotWidCss -= fullSize;\n\n\t\t\t\t\t\tif (side == 3) {\n\t\t\t\t\t\t\tplotLftCss += fullSize;\n\t\t\t\t\t\t\thasLftAxis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\thasRgtAxis = true;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tplotHgtCss -= fullSize;\n\n\t\t\t\t\t\tif (side == 0) {\n\t\t\t\t\t\t\tplotTopCss += fullSize;\n\t\t\t\t\t\t\thasTopAxis = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\thasBtmAxis = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\tsidesWithAxes[0] = hasTopAxis;\n\t\tsidesWithAxes[1] = hasRgtAxis;\n\t\tsidesWithAxes[2] = hasBtmAxis;\n\t\tsidesWithAxes[3] = hasLftAxis;\n\n\t\t// hz padding\n\t\tplotWidCss -= _padding[1] + _padding[3];\n\t\tplotLftCss += _padding[3];\n\n\t\t// vt padding\n\t\tplotHgtCss -= _padding[2] + _padding[0];\n\t\tplotTopCss += _padding[0];\n\t}\n\n\tfunction calcAxesRects() {\n\t\t// will accum +\n\t\tlet off1 = plotLftCss + plotWidCss;\n\t\tlet off2 = plotTopCss + plotHgtCss;\n\t\t// will accum -\n\t\tlet off3 = plotLftCss;\n\t\tlet off0 = plotTopCss;\n\n\t\tfunction incrOffset(side, size) {\n\t\t\tswitch (side) {\n\t\t\t\tcase 1: off1 += size; return off1 - size;\n\t\t\t\tcase 2: off2 += size; return off2 - size;\n\t\t\t\tcase 3: off3 -= size; return off3 + size;\n\t\t\t\tcase 0: off0 -= size; return off0 + size;\n\t\t\t}\n\t\t}\n\n\t\taxes.forEach((axis, i) => {\n\t\t\tif (axis.show && axis._show) {\n\t\t\t\tlet side = axis.side;\n\n\t\t\t\taxis._pos = incrOffset(side, axis._size);\n\n\t\t\t\tif (axis.label != null)\n\t\t\t\t\taxis._lpos = incrOffset(side, axis.labelSize);\n\t\t\t}\n\t\t});\n\t}\n\n\tconst cursor = (self.cursor = assign({}, cursorOpts, {drag: {y: mode == 2}}, opts.cursor));\n\n\t{\n\t\tcursor.idxs = activeIdxs;\n\n\t\tcursor._lock = false;\n\n\t\tlet points = cursor.points;\n\n\t\tpoints.show   = fnOrSelf(points.show);\n\t\tpoints.size   = fnOrSelf(points.size);\n\t\tpoints.stroke = fnOrSelf(points.stroke);\n\t\tpoints.width  = fnOrSelf(points.width);\n\t\tpoints.fill   = fnOrSelf(points.fill);\n\t}\n\n\tconst focus = self.focus = assign({}, opts.focus || {alpha: 0.3}, cursor.focus);\n\n\tif (focus.bias != 0)\n\t\tfocus.prox = 1e5; // big, but < Infinity\n\n\tconst cursorFocus = focus.prox >= 0;\n\n\t// series-intersection markers\n\tlet cursorPts = [null];\n\n\tfunction initCursorPt(s, si) {\n\t\tif (si > 0) {\n\t\t\tlet pt = cursor.points.show(self, si);\n\n\t\t\tif (pt) {\n\t\t\t\taddClass(pt, CURSOR_PT);\n\t\t\t\taddClass(pt, s.class);\n\t\t\t\telTrans(pt, -10, -10, plotWidCss, plotHgtCss);\n\t\t\t\tover.insertBefore(pt, cursorPts[si]);\n\n\t\t\t\treturn pt;\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction initSeries(s, i) {\n\t\tif (mode == 1 || i > 0) {\n\t\t\tlet isTime = mode == 1 && scales[s.scale].time;\n\n\t\t\tlet sv = s.value;\n\t\t\ts.value = isTime ? (isStr(sv) ? timeSeriesVal(_tzDate, timeSeriesStamp(sv, _fmtDate)) : sv || _timeSeriesVal) : sv || numSeriesVal;\n\t\t\ts.label = s.label || (isTime ? timeSeriesLabel : numSeriesLabel);\n\t\t}\n\n\t\tif (i > 0) {\n\t\t\ts.width  = s.width == null ? 1 : s.width;\n\t\t\ts.paths  = s.paths || linearPath || retNull;\n\t\t\ts.fillTo = fnOrSelf(s.fillTo || seriesFillTo);\n\t\t\ts.pxAlign = +ifNull(s.pxAlign, pxAlign);\n\t\t\ts.pxRound = pxRoundGen(s.pxAlign);\n\n\t\t\ts.stroke = fnOrSelf(s.stroke || null);\n\t\t\ts.fill   = fnOrSelf(s.fill || null);\n\t\t\ts._stroke = s._fill = s._paths = s._focus = null;\n\n\t\t\tlet _ptDia = ptDia(max(1, s.width), 1);\n\t\t\tlet points = s.points = assign({}, {\n\t\t\t\tsize: _ptDia,\n\t\t\t\twidth: max(1, _ptDia * .2),\n\t\t\t\tstroke: s.stroke,\n\t\t\t\tspace: _ptDia * 2,\n\t\t\t\tpaths: pointsPath,\n\t\t\t\t_stroke: null,\n\t\t\t\t_fill: null,\n\t\t\t}, s.points);\n\t\t\tpoints.show   = fnOrSelf(points.show);\n\t\t\tpoints.filter = fnOrSelf(points.filter);\n\t\t\tpoints.fill   = fnOrSelf(points.fill);\n\t\t\tpoints.stroke = fnOrSelf(points.stroke);\n\t\t\tpoints.paths  = fnOrSelf(points.paths);\n\t\t\tpoints.pxAlign = s.pxAlign;\n\t\t}\n\n\t\tif (showLegend) {\n\t\t\tlet rowCells = initLegendRow(s, i);\n\t\t\tlegendRows.splice(i, 0, rowCells[0]);\n\t\t\tlegendCells.splice(i, 0, rowCells[1]);\n\t\t\tlegend.values.push(null);\t// NULL_LEGEND_VALS not yet avil here :(\n\t\t}\n\n\t\tif (cursor.show) {\n\t\t\tactiveIdxs.splice(i, 0, null);\n\n\t\t\tlet pt = initCursorPt(s, i);\n\t\t\tpt && cursorPts.splice(i, 0, pt);\n\t\t}\n\n\t\tfire(\"addSeries\", i);\n\t}\n\n\tfunction addSeries(opts, si) {\n\t\tsi = si == null ? series.length : si;\n\n\t\topts = mode == 1 ? setDefault(opts, si, xSeriesOpts, ySeriesOpts) : setDefault(opts, si, null, xySeriesOpts);\n\n\t\tseries.splice(si, 0, opts);\n\t\tinitSeries(series[si], si);\n\t}\n\n\tself.addSeries = addSeries;\n\n\tfunction delSeries(i) {\n\t\tseries.splice(i, 1);\n\n\t\tif (showLegend) {\n\t\t\tlegend.values.splice(i, 1);\n\n\t\t\tlegendCells.splice(i, 1);\n\t\t\tlet tr = legendRows.splice(i, 1)[0];\n\t\t\toffMouse(null, tr.firstChild);\n\t\t\ttr.remove();\n\t\t}\n\n\t\tif (cursor.show) {\n\t\t\tactiveIdxs.splice(i, 1);\n\n\t\t\tcursorPts.length > 1 && cursorPts.splice(i, 1)[0].remove();\n\t\t}\n\n\t\t// TODO: de-init no-longer-needed scales?\n\n\t\tfire(\"delSeries\", i);\n\t}\n\n\tself.delSeries = delSeries;\n\n\tconst sidesWithAxes = [false, false, false, false];\n\n\tfunction initAxis(axis, i) {\n\t\taxis._show = axis.show;\n\n\t\tif (axis.show) {\n\t\t\tlet isVt = axis.side % 2;\n\n\t\t\tlet sc = scales[axis.scale];\n\n\t\t\t// this can occur if all series specify non-default scales\n\t\t\tif (sc == null) {\n\t\t\t\taxis.scale = isVt ? series[1].scale : xScaleKey;\n\t\t\t\tsc = scales[axis.scale];\n\t\t\t}\n\n\t\t\t// also set defaults for incrs & values based on axis distr\n\t\t\tlet isTime = sc.time;\n\n\t\t\taxis.size   = fnOrSelf(axis.size);\n\t\t\taxis.space  = fnOrSelf(axis.space);\n\t\t\taxis.rotate = fnOrSelf(axis.rotate);\n\t\t\taxis.incrs  = fnOrSelf(axis.incrs  || (          sc.distr == 2 ? wholeIncrs : (isTime ? (ms == 1 ? timeIncrsMs : timeIncrsS) : numIncrs)));\n\t\t\taxis.splits = fnOrSelf(axis.splits || (isTime && sc.distr == 1 ? _timeAxisSplits : sc.distr == 3 ? logAxisSplits : sc.distr == 4 ? asinhAxisSplits : numAxisSplits));\n\n\t\t\taxis.stroke        = fnOrSelf(axis.stroke);\n\t\t\taxis.grid.stroke   = fnOrSelf(axis.grid.stroke);\n\t\t\taxis.ticks.stroke  = fnOrSelf(axis.ticks.stroke);\n\t\t\taxis.border.stroke = fnOrSelf(axis.border.stroke);\n\n\t\t\tlet av = axis.values;\n\n\t\t\taxis.values = (\n\t\t\t\t// static array of tick values\n\t\t\t\tisArr(av) && !isArr(av[0]) ? fnOrSelf(av) :\n\t\t\t\t// temporal\n\t\t\t\tisTime ? (\n\t\t\t\t\t// config array of fmtDate string tpls\n\t\t\t\t\tisArr(av) ?\n\t\t\t\t\t\ttimeAxisVals(_tzDate, timeAxisStamps(av, _fmtDate)) :\n\t\t\t\t\t// fmtDate string tpl\n\t\t\t\t\tisStr(av) ?\n\t\t\t\t\t\ttimeAxisVal(_tzDate, av) :\n\t\t\t\t\tav || _timeAxisVals\n\t\t\t\t) : av || numAxisVals\n\t\t\t);\n\n\t\t\taxis.filter = fnOrSelf(axis.filter || (          sc.distr >= 3 && sc.log == 10 ? log10AxisValsFilt : retArg1));\n\n\t\t\taxis.font      = pxRatioFont(axis.font);\n\t\t\taxis.labelFont = pxRatioFont(axis.labelFont);\n\n\t\t\taxis._size   = axis.size(self, null, i, 0);\n\n\t\t\taxis._space  =\n\t\t\taxis._rotate =\n\t\t\taxis._incrs  =\n\t\t\taxis._found  =\t// foundIncrSpace\n\t\t\taxis._splits =\n\t\t\taxis._values = null;\n\n\t\t\tif (axis._size > 0) {\n\t\t\t\tsidesWithAxes[i] = true;\n\t\t\t\taxis._el = placeDiv(AXIS, wrap);\n\t\t\t}\n\n\t\t\t// debug\n\t\t//\taxis._el.style.background = \"#\"  + Math.floor(Math.random()*16777215).toString(16) + '80';\n\t\t}\n\t}\n\n\tfunction autoPadSide(self, side, sidesWithAxes, cycleNum) {\n\t\tlet [hasTopAxis, hasRgtAxis, hasBtmAxis, hasLftAxis] = sidesWithAxes;\n\n\t\tlet ori = side % 2;\n\t\tlet size = 0;\n\n\t\tif (ori == 0 && (hasLftAxis || hasRgtAxis))\n\t\t\tsize = (side == 0 && !hasTopAxis || side == 2 && !hasBtmAxis ? round(xAxisOpts.size / 3) : 0);\n\t\tif (ori == 1 && (hasTopAxis || hasBtmAxis))\n\t\t\tsize = (side == 1 && !hasRgtAxis || side == 3 && !hasLftAxis ? round(yAxisOpts.size / 2) : 0);\n\n\t\treturn size;\n\t}\n\n\tconst padding = self.padding = (opts.padding || [autoPadSide,autoPadSide,autoPadSide,autoPadSide]).map(p => fnOrSelf(ifNull(p, autoPadSide)));\n\tconst _padding = self._padding = padding.map((p, i) => p(self, i, sidesWithAxes, 0));\n\n\tlet dataLen;\n\n\t// rendered data window\n\tlet i0 = null;\n\tlet i1 = null;\n\tconst idxs = mode == 1 ? series[0].idxs : null;\n\n\tlet data0 = null;\n\n\tlet viaAutoScaleX = false;\n\n\tfunction setData(_data, _resetScales) {\n\t\tdata = _data == null ? [] : copy(_data, fastIsObj);\n\n\t\tif (mode == 2) {\n\t\t\tdataLen = 0;\n\t\t\tfor (let i = 1; i < series.length; i++)\n\t\t\t\tdataLen += data[i][0].length;\n\t\t\tself.data = data = _data;\n\t\t}\n\t\telse {\n\t\t\tif (data[0] == null)\n\t\t\t\tdata[0] = [];\n\n\t\t\tself.data = data.slice();\n\n\t\t\tdata0 = data[0];\n\t\t\tdataLen = data0.length;\n\n\t\t\tif (xScaleDistr == 2) {\n\t\t\t\tdata[0] = Array(dataLen);\n\t\t\t\tfor (let i = 0; i < dataLen; i++)\n\t\t\t\t\tdata[0][i] = i;\n\t\t\t}\n\t\t}\n\n\t\tself._data = data;\n\n\t\tresetYSeries(true);\n\n\t\tfire(\"setData\");\n\n\t\t// forces x axis tick values to re-generate when neither x scale nor y scale changes\n\t\t// in ordinal mode, scale range is by index, so will not change if new data has same length, but tick values are from data\n\t\tif (xScaleDistr == 2) {\n\t\t\tshouldConvergeSize = true;\n\n\t\t\t/* or somewhat cheaper, and uglier:\n\t\t\tif (ready) {\n\t\t\t\t// logic extracted from axesCalc()\n\t\t\t\tlet i = 0;\n\t\t\t\tlet axis = axes[i];\n\t\t\t\tlet _splits = axis._splits.map(i => data0[i]);\n\t\t\t\tlet [_incr, _space] = axis._found;\n\t\t\t\tlet incr = data0[_splits[1]] - data0[_splits[0]];\n\t\t\t\taxis._values = axis.values(self, axis.filter(self, _splits, i, _space, incr), i, _space, incr);\n\t\t\t}\n\t\t\t*/\n\t\t}\n\n\t\tif (_resetScales !== false) {\n\t\t\tlet xsc = scaleX;\n\n\t\t\tif (xsc.auto(self, viaAutoScaleX))\n\t\t\t\tautoScaleX();\n\t\t\telse\n\t\t\t\t_setScale(xScaleKey, xsc.min, xsc.max);\n\n\t\t\tshouldSetCursor = cursor.left >= 0;\n\t\t\tshouldSetLegend = true;\n\t\t\tcommit();\n\t\t}\n\t}\n\n\tself.setData = setData;\n\n\tfunction autoScaleX() {\n\t\tviaAutoScaleX = true;\n\n\t\tlet _min, _max;\n\n\t\tif (mode == 1) {\n\t\t\tif (dataLen > 0) {\n\t\t\t\ti0 = idxs[0] = 0;\n\t\t\t\ti1 = idxs[1] = dataLen - 1;\n\n\t\t\t\t_min = data[0][i0];\n\t\t\t\t_max = data[0][i1];\n\n\t\t\t\tif (xScaleDistr == 2) {\n\t\t\t\t\t_min = i0;\n\t\t\t\t\t_max = i1;\n\t\t\t\t}\n\t\t\t\telse if (dataLen == 1) {\n\t\t\t\t\tif (xScaleDistr == 3)\n\t\t\t\t\t\t[_min, _max] = rangeLog(_min, _min, scaleX.log, false);\n\t\t\t\t\telse if (xScaleDistr == 4)\n\t\t\t\t\t\t[_min, _max] = rangeAsinh(_min, _min, scaleX.log, false);\n\t\t\t\t\telse if (scaleX.time)\n\t\t\t\t\t\t_max = _min + round(86400 / ms);\n\t\t\t\t\telse\n\t\t\t\t\t\t[_min, _max] = rangeNum(_min, _max, rangePad, true);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\ti0 = idxs[0] = _min = null;\n\t\t\t\ti1 = idxs[1] = _max = null;\n\t\t\t}\n\t\t}\n\n\t\t_setScale(xScaleKey, _min, _max);\n\t}\n\n\tlet ctxStroke, ctxFill, ctxWidth, ctxDash, ctxJoin, ctxCap, ctxFont, ctxAlign, ctxBaseline;\n\tlet ctxAlpha;\n\n\tfunction setCtxStyle(stroke, width, dash, cap, fill, join) {\n\t\tstroke ??= transparent;\n\t\tdash   ??= EMPTY_ARR;\n\t\tcap    ??= \"butt\"; // (\u203F|\u203F)\n\t\tfill   ??= transparent;\n\t\tjoin   ??= \"round\";\n\n\t\tif (stroke != ctxStroke)\n\t\t\tctx.strokeStyle = ctxStroke = stroke;\n\t\tif (fill != ctxFill)\n\t\t\tctx.fillStyle = ctxFill = fill;\n\t\tif (width != ctxWidth)\n\t\t\tctx.lineWidth = ctxWidth = width;\n\t\tif (join != ctxJoin)\n\t\t\tctx.lineJoin = ctxJoin = join;\n\t\tif (cap != ctxCap)\n\t\t\tctx.lineCap = ctxCap = cap;\n\t\tif (dash != ctxDash)\n\t\t\tctx.setLineDash(ctxDash = dash);\n\t}\n\n\tfunction setFontStyle(font, fill, align, baseline) {\n\t\tif (fill != ctxFill)\n\t\t\tctx.fillStyle = ctxFill = fill;\n\t\tif (font != ctxFont)\n\t\t\tctx.font = ctxFont = font;\n\t\tif (align != ctxAlign)\n\t\t\tctx.textAlign = ctxAlign = align;\n\t\tif (baseline != ctxBaseline)\n\t\t\tctx.textBaseline = ctxBaseline = baseline;\n\t}\n\n\tfunction accScale(wsc, psc, facet, data, sorted = 0) {\n\t\tif (data.length > 0 && wsc.auto(self, viaAutoScaleX) && (psc == null || psc.min == null)) {\n\t\t\tlet _i0 = ifNull(i0, 0);\n\t\t\tlet _i1 = ifNull(i1, data.length - 1);\n\n\t\t\t// only run getMinMax() for invalidated series data, else reuse\n\t\t\tlet minMax = facet.min == null ? (wsc.distr == 3 ? getMinMaxLog(data, _i0, _i1) : getMinMax(data, _i0, _i1, sorted)) : [facet.min, facet.max];\n\n\t\t\t// initial min/max\n\t\t\twsc.min = min(wsc.min, facet.min = minMax[0]);\n\t\t\twsc.max = max(wsc.max, facet.max = minMax[1]);\n\t\t}\n\t}\n\n\tfunction setScales() {\n\t//\tlog(\"setScales()\", arguments);\n\n\t\t// wip scales\n\t\tlet wipScales = copy(scales, fastIsObj);\n\n\t\tfor (let k in wipScales) {\n\t\t\tlet wsc = wipScales[k];\n\t\t\tlet psc = pendScales[k];\n\n\t\t\tif (psc != null && psc.min != null) {\n\t\t\t\tassign(wsc, psc);\n\n\t\t\t\t// explicitly setting the x-scale invalidates everything (acts as redraw)\n\t\t\t\tif (k == xScaleKey)\n\t\t\t\t\tresetYSeries(true);\n\t\t\t}\n\t\t\telse if (k != xScaleKey || mode == 2) {\n\t\t\t\tif (dataLen == 0 && wsc.from == null) {\n\t\t\t\t\tlet minMax = wsc.range(self, null, null, k);\n\t\t\t\t\twsc.min = minMax[0];\n\t\t\t\t\twsc.max = minMax[1];\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\twsc.min = inf;\n\t\t\t\t\twsc.max = -inf;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (dataLen > 0) {\n\t\t\t// pre-range y-scales from y series' data values\n\t\t\tseries.forEach((s, i) => {\n\t\t\t\tif (mode == 1) {\n\t\t\t\t\tlet k = s.scale;\n\t\t\t\t\tlet wsc = wipScales[k];\n\t\t\t\t\tlet psc = pendScales[k];\n\n\t\t\t\t\tif (i == 0) {\n\t\t\t\t\t\tlet minMax = wsc.range(self, wsc.min, wsc.max, k);\n\n\t\t\t\t\t\twsc.min = minMax[0];\n\t\t\t\t\t\twsc.max = minMax[1];\n\n\t\t\t\t\t\ti0 = closestIdx(wsc.min, data[0]);\n\t\t\t\t\t\ti1 = closestIdx(wsc.max, data[0]);\n\n\t\t\t\t\t\t// don't try to contract same or adjacent idxs\n\t\t\t\t\t\tif (i1 - i0 > 1) {\n\t\t\t\t\t\t\t// closest indices can be outside of view\n\t\t\t\t\t\t\tif (data[0][i0] < wsc.min)\n\t\t\t\t\t\t\t\ti0++;\n\t\t\t\t\t\t\tif (data[0][i1] > wsc.max)\n\t\t\t\t\t\t\t\ti1--;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ts.min = data0[i0];\n\t\t\t\t\t\ts.max = data0[i1];\n\t\t\t\t\t}\n\t\t\t\t\telse if (s.show && s.auto)\n\t\t\t\t\t\taccScale(wsc, psc, s, data[i], s.sorted);\n\n\t\t\t\t\ts.idxs[0] = i0;\n\t\t\t\t\ts.idxs[1] = i1;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (i > 0) {\n\t\t\t\t\t\tif (s.show && s.auto) {\n\t\t\t\t\t\t\t// TODO: only handles, assumes and requires facets[0] / 'x' scale, and facets[1] / 'y' scale\n\t\t\t\t\t\t\tlet [ xFacet, yFacet ] = s.facets;\n\t\t\t\t\t\t\tlet xScaleKey = xFacet.scale;\n\t\t\t\t\t\t\tlet yScaleKey = yFacet.scale;\n\t\t\t\t\t\t\tlet [ xData, yData ] = data[i];\n\n\t\t\t\t\t\t\taccScale(wipScales[xScaleKey], pendScales[xScaleKey], xFacet, xData, xFacet.sorted);\n\t\t\t\t\t\t\taccScale(wipScales[yScaleKey], pendScales[yScaleKey], yFacet, yData, yFacet.sorted);\n\n\t\t\t\t\t\t\t// temp\n\t\t\t\t\t\t\ts.min = yFacet.min;\n\t\t\t\t\t\t\ts.max = yFacet.max;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// range independent scales\n\t\t\tfor (let k in wipScales) {\n\t\t\t\tlet wsc = wipScales[k];\n\t\t\t\tlet psc = pendScales[k];\n\n\t\t\t\tif (wsc.from == null && (psc == null || psc.min == null)) {\n\t\t\t\t\tlet minMax = wsc.range(\n\t\t\t\t\t\tself,\n\t\t\t\t\t\twsc.min ==  inf ? null : wsc.min,\n\t\t\t\t\t\twsc.max == -inf ? null : wsc.max,\n\t\t\t\t\t\tk\n\t\t\t\t\t);\n\t\t\t\t\twsc.min = minMax[0];\n\t\t\t\t\twsc.max = minMax[1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// range dependent scales\n\t\tfor (let k in wipScales) {\n\t\t\tlet wsc = wipScales[k];\n\n\t\t\tif (wsc.from != null) {\n\t\t\t\tlet base = wipScales[wsc.from];\n\n\t\t\t\tif (base.min == null)\n\t\t\t\t\twsc.min = wsc.max = null;\n\t\t\t\telse {\n\t\t\t\t\tlet minMax = wsc.range(self, base.min, base.max, k);\n\t\t\t\t\twsc.min = minMax[0];\n\t\t\t\t\twsc.max = minMax[1];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tlet changed = {};\n\t\tlet anyChanged = false;\n\n\t\tfor (let k in wipScales) {\n\t\t\tlet wsc = wipScales[k];\n\t\t\tlet sc = scales[k];\n\n\t\t\tif (sc.min != wsc.min || sc.max != wsc.max) {\n\t\t\t\tsc.min = wsc.min;\n\t\t\t\tsc.max = wsc.max;\n\n\t\t\t\tlet distr = sc.distr;\n\n\t\t\t\tsc._min = distr == 3 ? log10(sc.min) : distr == 4 ? asinh(sc.min, sc.asinh) : sc.min;\n\t\t\t\tsc._max = distr == 3 ? log10(sc.max) : distr == 4 ? asinh(sc.max, sc.asinh) : sc.max;\n\n\t\t\t\tchanged[k] = anyChanged = true;\n\t\t\t}\n\t\t}\n\n\t\tif (anyChanged) {\n\t\t\t// invalidate paths of all series on changed scales\n\t\t\tseries.forEach((s, i) => {\n\t\t\t\tif (mode == 2) {\n\t\t\t\t\tif (i > 0 && changed.y)\n\t\t\t\t\t\ts._paths = null;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (changed[s.scale])\n\t\t\t\t\t\ts._paths = null;\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tfor (let k in changed) {\n\t\t\t\tshouldConvergeSize = true;\n\t\t\t\tfire(\"setScale\", k);\n\t\t\t}\n\n\t\t\tif (cursor.show && cursor.left >= 0)\n\t\t\t\tshouldSetCursor = shouldSetLegend = true;\n\t\t}\n\n\t\tfor (let k in pendScales)\n\t\t\tpendScales[k] = null;\n\t}\n\n\t// grabs the nearest indices with y data outside of x-scale limits\n\tfunction getOuterIdxs(ydata) {\n\t\tlet _i0 = clamp(i0 - 1, 0, dataLen - 1);\n\t\tlet _i1 = clamp(i1 + 1, 0, dataLen - 1);\n\n\t\twhile (ydata[_i0] == null && _i0 > 0)\n\t\t\t_i0--;\n\n\t\twhile (ydata[_i1] == null && _i1 < dataLen - 1)\n\t\t\t_i1++;\n\n\t\treturn [_i0, _i1];\n\t}\n\n\tfunction drawSeries() {\n\t\tif (dataLen > 0) {\n\t\t\tseries.forEach((s, i) => {\n\t\t\t\tif (i > 0 && s.show && s._paths == null) {\n\t\t\t\t\tlet _idxs = mode == 2 ? [0, data[i][0].length - 1] : getOuterIdxs(data[i]);\n\t\t\t\t\ts._paths = s.paths(self, i, _idxs[0], _idxs[1]);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\tseries.forEach((s, i) => {\n\t\t\t\tif (i > 0 && s.show) {\n\t\t\t\t\tif (ctxAlpha != s.alpha)\n\t\t\t\t\t\tctx.globalAlpha = ctxAlpha = s.alpha;\n\n\t\t\t\t\t{\n\t\t\t\t\t\tcacheStrokeFill(i, false);\n\t\t\t\t\t\ts._paths && drawPath(i, false);\n\t\t\t\t\t}\n\n\t\t\t\t\t{\n\t\t\t\t\t\tcacheStrokeFill(i, true);\n\n\t\t\t\t\t\tlet _gaps = s._paths ? s._paths.gaps : null;\n\n\t\t\t\t\t\tlet show = s.points.show(self, i, i0, i1, _gaps);\n\t\t\t\t\t\tlet idxs = s.points.filter(self, i, show, _gaps);\n\n\t\t\t\t\t\tif (show || idxs) {\n\t\t\t\t\t\t\ts.points._paths = s.points.paths(self, i, i0, i1, idxs);\n\t\t\t\t\t\t\tdrawPath(i, true);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (ctxAlpha != 1)\n\t\t\t\t\t\tctx.globalAlpha = ctxAlpha = 1;\n\n\t\t\t\t\tfire(\"drawSeries\", i);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tfunction cacheStrokeFill(si, _points) {\n\t\tlet s = _points ? series[si].points : series[si];\n\n\t\ts._stroke = s.stroke(self, si);\n\t\ts._fill   = s.fill(self, si);\n\t}\n\n\tfunction drawPath(si, _points) {\n\t\tlet s = _points ? series[si].points : series[si];\n\n\t\tlet strokeStyle = s._stroke;\n\t\tlet fillStyle   = s._fill;\n\n\t\tlet { stroke, fill, clip: gapsClip, flags } = s._paths;\n\t\tlet boundsClip = null;\n\t\tlet width = roundDec(s.width * pxRatio, 3);\n\t\tlet offset = (width % 2) / 2;\n\n\t\tif (_points && fillStyle == null)\n\t\t\tfillStyle = width > 0 ? \"#fff\" : strokeStyle;\n\n\t\tlet _pxAlign = s.pxAlign == 1;\n\n\t\t_pxAlign && ctx.translate(offset, offset);\n\n\t\tif (!_points) {\n\t\t\tlet lft = plotLft,\n\t\t\t\ttop = plotTop,\n\t\t\t\twid = plotWid,\n\t\t\t\thgt = plotHgt;\n\n\t\t\tlet halfWid = width * pxRatio / 2;\n\n\t\t\tif (s.min == 0)\n\t\t\t\thgt += halfWid;\n\n\t\t\tif (s.max == 0) {\n\t\t\t\ttop -= halfWid;\n\t\t\t\thgt += halfWid;\n\t\t\t}\n\n\t\t\tboundsClip = new Path2D();\n\t\t\tboundsClip.rect(lft, top, wid, hgt);\n\t\t}\n\n\t\t// the points pathbuilder's gapsClip is its boundsClip, since points dont need gaps clipping, and bounds depend on point size\n\t\tif (_points)\n\t\t\tstrokeFill(strokeStyle, width, s.dash, s.cap, fillStyle, stroke, fill, flags, gapsClip);\n\t\telse\n\t\t\tfillStroke(si, strokeStyle, width, s.dash, s.cap, fillStyle, stroke, fill, flags, boundsClip, gapsClip);\n\n\t\t_pxAlign && ctx.translate(-offset, -offset);\n\t}\n\n\tfunction fillStroke(si, strokeStyle, lineWidth, lineDash, lineCap, fillStyle, strokePath, fillPath, flags, boundsClip, gapsClip) {\n\t\tlet didStrokeFill = false;\n\n\t\t// for all bands where this series is the top edge, create upwards clips using the bottom edges\n\t\t// and apply clips + fill with band fill or dfltFill\n\t\tbands.forEach((b, bi) => {\n\t\t\t// isUpperEdge?\n\t\t\tif (b.series[0] == si) {\n\t\t\t\tlet lowerEdge = series[b.series[1]];\n\t\t\t\tlet lowerData = data[b.series[1]];\n\n\t\t\t\tlet bandClip = (lowerEdge._paths || EMPTY_OBJ).band;\n\n\t\t\t\tif (isArr(bandClip))\n\t\t\t\t\tbandClip = b.dir == 1 ? bandClip[0] : bandClip[1];\n\n\t\t\t\tlet gapsClip2;\n\n\t\t\t\tlet _fillStyle = null;\n\n\t\t\t\t// hasLowerEdge?\n\t\t\t\tif (lowerEdge.show && bandClip && hasData(lowerData, i0, i1)) {\n\t\t\t\t\t_fillStyle = b.fill(self, bi) || fillStyle;\n\t\t\t\t\tgapsClip2 = lowerEdge._paths.clip;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\tbandClip = null;\n\n\t\t\t\tstrokeFill(strokeStyle, lineWidth, lineDash, lineCap, _fillStyle, strokePath, fillPath, flags, boundsClip, gapsClip, gapsClip2, bandClip);\n\n\t\t\t\tdidStrokeFill = true;\n\t\t\t}\n\t\t});\n\n\t\tif (!didStrokeFill)\n\t\t\tstrokeFill(strokeStyle, lineWidth, lineDash, lineCap, fillStyle, strokePath, fillPath, flags, boundsClip, gapsClip);\n\t}\n\n\tconst CLIP_FILL_STROKE = BAND_CLIP_FILL | BAND_CLIP_STROKE;\n\n\tfunction strokeFill(strokeStyle, lineWidth, lineDash, lineCap, fillStyle, strokePath, fillPath, flags, boundsClip, gapsClip, gapsClip2, bandClip) {\n\t\tsetCtxStyle(strokeStyle, lineWidth, lineDash, lineCap, fillStyle);\n\n\t\tif (boundsClip || gapsClip || bandClip) {\n\t\t\tctx.save();\n\t\t\tboundsClip && ctx.clip(boundsClip);\n\t\t\tgapsClip && ctx.clip(gapsClip);\n\t\t}\n\n\t\tif (bandClip) {\n\t\t\tif ((flags & CLIP_FILL_STROKE) == CLIP_FILL_STROKE) {\n\t\t\t\tctx.clip(bandClip);\n\t\t\t\tgapsClip2 && ctx.clip(gapsClip2);\n\t\t\t\tdoFill(fillStyle, fillPath);\n\t\t\t\tdoStroke(strokeStyle, strokePath, lineWidth);\n\t\t\t}\n\t\t\telse if (flags & BAND_CLIP_STROKE) {\n\t\t\t\tdoFill(fillStyle, fillPath);\n\t\t\t\tctx.clip(bandClip);\n\t\t\t\tdoStroke(strokeStyle, strokePath, lineWidth);\n\t\t\t}\n\t\t\telse if (flags & BAND_CLIP_FILL) {\n\t\t\t\tctx.save();\n\t\t\t\tctx.clip(bandClip);\n\t\t\t\tgapsClip2 && ctx.clip(gapsClip2);\n\t\t\t\tdoFill(fillStyle, fillPath);\n\t\t\t\tctx.restore();\n\t\t\t\tdoStroke(strokeStyle, strokePath, lineWidth);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tdoFill(fillStyle, fillPath);\n\t\t\tdoStroke(strokeStyle, strokePath, lineWidth);\n\t\t}\n\n\t\tif (boundsClip || gapsClip || bandClip)\n\t\t\tctx.restore();\n\t}\n\n\tfunction doStroke(strokeStyle, strokePath, lineWidth) {\n\t\tif (lineWidth > 0) {\n\t\t\tif (strokePath instanceof Map) {\n\t\t\t\tstrokePath.forEach((strokePath, strokeStyle) => {\n\t\t\t\t\tctx.strokeStyle = ctxStroke = strokeStyle;\n\t\t\t\t\tctx.stroke(strokePath);\n\t\t\t\t});\n\t\t\t}\n\t\t\telse\n\t\t\t\tstrokePath != null && strokeStyle && ctx.stroke(strokePath);\n\t\t}\n\t}\n\n\tfunction doFill(fillStyle, fillPath) {\n\t\tif (fillPath instanceof Map) {\n\t\t\tfillPath.forEach((fillPath, fillStyle) => {\n\t\t\t\tctx.fillStyle = ctxFill = fillStyle;\n\t\t\t\tctx.fill(fillPath);\n\t\t\t});\n\t\t}\n\t\telse\n\t\t\tfillPath != null && fillStyle && ctx.fill(fillPath);\n\t}\n\n\tfunction getIncrSpace(axisIdx, min, max, fullDim) {\n\t\tlet axis = axes[axisIdx];\n\n\t\tlet incrSpace;\n\n\t\tif (fullDim <= 0)\n\t\t\tincrSpace = [0, 0];\n\t\telse {\n\t\t\tlet minSpace = axis._space = axis.space(self, axisIdx, min, max, fullDim);\n\t\t\tlet incrs    = axis._incrs = axis.incrs(self, axisIdx, min, max, fullDim, minSpace);\n\t\t\tincrSpace    = findIncr(min, max, incrs, fullDim, minSpace);\n\t\t}\n\n\t\treturn (axis._found = incrSpace);\n\t}\n\n\tfunction drawOrthoLines(offs, filts, ori, side, pos0, len, width, stroke, dash, cap) {\n\t\tlet offset = (width % 2) / 2;\n\n\t\tpxAlign == 1 && ctx.translate(offset, offset);\n\n\t\tsetCtxStyle(stroke, width, dash, cap, stroke);\n\n\t\tctx.beginPath();\n\n\t\tlet x0, y0, x1, y1, pos1 = pos0 + (side == 0 || side == 3 ? -len : len);\n\n\t\tif (ori == 0) {\n\t\t\ty0 = pos0;\n\t\t\ty1 = pos1;\n\t\t}\n\t\telse {\n\t\t\tx0 = pos0;\n\t\t\tx1 = pos1;\n\t\t}\n\n\t\tfor (let i = 0; i < offs.length; i++) {\n\t\t\tif (filts[i] != null) {\n\t\t\t\tif (ori == 0)\n\t\t\t\t\tx0 = x1 = offs[i];\n\t\t\t\telse\n\t\t\t\t\ty0 = y1 = offs[i];\n\n\t\t\t\tctx.moveTo(x0, y0);\n\t\t\t\tctx.lineTo(x1, y1);\n\t\t\t}\n\t\t}\n\n\t\tctx.stroke();\n\n\t\tpxAlign == 1 && ctx.translate(-offset, -offset);\n\t}\n\n\tfunction axesCalc(cycleNum) {\n\t//\tlog(\"axesCalc()\", arguments);\n\n\t\tlet converged = true;\n\n\t\taxes.forEach((axis, i) => {\n\t\t\tif (!axis.show)\n\t\t\t\treturn;\n\n\t\t\tlet scale = scales[axis.scale];\n\n\t\t\tif (scale.min == null) {\n\t\t\t\tif (axis._show) {\n\t\t\t\t\tconverged = false;\n\t\t\t\t\taxis._show = false;\n\t\t\t\t\tresetYSeries(false);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (!axis._show) {\n\t\t\t\t\tconverged = false;\n\t\t\t\t\taxis._show = true;\n\t\t\t\t\tresetYSeries(false);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet side = axis.side;\n\t\t\tlet ori = side % 2;\n\n\t\t\tlet {min, max} = scale;\t\t// \t\t// should this toggle them ._show = false\n\n\t\t\tlet [_incr, _space] = getIncrSpace(i, min, max, ori == 0 ? plotWidCss : plotHgtCss);\n\n\t\t\tif (_space == 0)\n\t\t\t\treturn;\n\n\t\t\t// if we're using index positions, force first tick to match passed index\n\t\t\tlet forceMin = scale.distr == 2;\n\n\t\t\tlet _splits = axis._splits = axis.splits(self, i, min, max, _incr, _space, forceMin);\n\n\t\t\t// tick labels\n\t\t\t// BOO this assumes a specific data/series\n\t\t\tlet splits = scale.distr == 2 ? _splits.map(i => data0[i]) : _splits;\n\t\t\tlet incr   = scale.distr == 2 ? data0[_splits[1]] - data0[_splits[0]] : _incr;\n\n\t\t\tlet values = axis._values = axis.values(self, axis.filter(self, splits, i, _space, incr), i, _space, incr);\n\n\t\t\t// rotating of labels only supported on bottom x axis\n\t\t\taxis._rotate = side == 2 ? axis.rotate(self, values, i, _space) : 0;\n\n\t\t\tlet oldSize = axis._size;\n\n\t\t\taxis._size = ceil(axis.size(self, values, i, cycleNum));\n\n\t\t\tif (oldSize != null && axis._size != oldSize)\t\t\t// ready && ?\n\t\t\t\tconverged = false;\n\t\t});\n\n\t\treturn converged;\n\t}\n\n\tfunction paddingCalc(cycleNum) {\n\t\tlet converged = true;\n\n\t\tpadding.forEach((p, i) => {\n\t\t\tlet _p = p(self, i, sidesWithAxes, cycleNum);\n\n\t\t\tif (_p != _padding[i])\n\t\t\t\tconverged = false;\n\n\t\t\t_padding[i] = _p;\n\t\t});\n\n\t\treturn converged;\n\t}\n\n\tfunction drawAxesGrid() {\n\t\tfor (let i = 0; i < axes.length; i++) {\n\t\t\tlet axis = axes[i];\n\n\t\t\tif (!axis.show || !axis._show)\n\t\t\t\tcontinue;\n\n\t\t\tlet side = axis.side;\n\t\t\tlet ori = side % 2;\n\n\t\t\tlet x, y;\n\n\t\t\tlet fillStyle = axis.stroke(self, i);\n\n\t\t\tlet shiftDir = side == 0 || side == 3 ? -1 : 1;\n\n\t\t\t// axis label\n\t\t\tif (axis.label) {\n\t\t\t\tlet shiftAmt = axis.labelGap * shiftDir;\n\t\t\t\tlet baseLpos = round((axis._lpos + shiftAmt) * pxRatio);\n\n\t\t\t\tsetFontStyle(axis.labelFont[0], fillStyle, \"center\", side == 2 ? TOP : BOTTOM);\n\n\t\t\t\tctx.save();\n\n\t\t\t\tif (ori == 1) {\n\t\t\t\t\tx = y = 0;\n\n\t\t\t\t\tctx.translate(\n\t\t\t\t\t\tbaseLpos,\n\t\t\t\t\t\tround(plotTop + plotHgt / 2),\n\t\t\t\t\t);\n\t\t\t\t\tctx.rotate((side == 3 ? -PI : PI) / 2);\n\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tx = round(plotLft + plotWid / 2);\n\t\t\t\t\ty = baseLpos;\n\t\t\t\t}\n\n\t\t\t\tctx.fillText(axis.label, x, y);\n\n\t\t\t\tctx.restore();\n\t\t\t}\n\n\t\t\tlet [_incr, _space] = axis._found;\n\n\t\t\tif (_space == 0)\n\t\t\t\tcontinue;\n\n\t\t\tlet scale = scales[axis.scale];\n\n\t\t\tlet plotDim = ori == 0 ? plotWid : plotHgt;\n\t\t\tlet plotOff = ori == 0 ? plotLft : plotTop;\n\n\t\t\tlet axisGap = round(axis.gap * pxRatio);\n\n\t\t\tlet _splits = axis._splits;\n\n\t\t\t// tick labels\n\t\t\t// BOO this assumes a specific data/series\n\t\t\tlet splits = scale.distr == 2 ? _splits.map(i => data0[i]) : _splits;\n\t\t\tlet incr   = scale.distr == 2 ? data0[_splits[1]] - data0[_splits[0]] : _incr;\n\n\t\t\tlet ticks = axis.ticks;\n\t\t\tlet border = axis.border;\n\t\t\tlet tickSize = ticks.show ? round(ticks.size * pxRatio) : 0;\n\n\t\t\t// rotating of labels only supported on bottom x axis\n\t\t\tlet angle = axis._rotate * -PI/180;\n\n\t\t\tlet basePos  = pxRound(axis._pos * pxRatio);\n\t\t\tlet shiftAmt = (tickSize + axisGap) * shiftDir;\n\t\t\tlet finalPos = basePos + shiftAmt;\n\t\t\t    y        = ori == 0 ? finalPos : 0;\n\t\t\t    x        = ori == 1 ? finalPos : 0;\n\n\t\t\tlet font         = axis.font[0];\n\t\t\tlet textAlign    = axis.align == 1 ? LEFT :\n\t\t\t                   axis.align == 2 ? RIGHT :\n\t\t\t                   angle > 0 ? LEFT :\n\t\t\t                   angle < 0 ? RIGHT :\n\t\t\t                   ori == 0 ? \"center\" : side == 3 ? RIGHT : LEFT;\n\t\t\tlet textBaseline = angle ||\n\t\t\t                   ori == 1 ? \"middle\" : side == 2 ? TOP   : BOTTOM;\n\n\t\t\tsetFontStyle(font, fillStyle, textAlign, textBaseline);\n\n\t\t\tlet lineHeight = axis.font[1] * lineMult;\n\n\t\t\tlet canOffs = _splits.map(val => pxRound(getPos(val, scale, plotDim, plotOff)));\n\n\t\t\tlet _values = axis._values;\n\n\t\t\tfor (let i = 0; i < _values.length; i++) {\n\t\t\t\tlet val = _values[i];\n\n\t\t\t\tif (val != null) {\n\t\t\t\t\tif (ori == 0)\n\t\t\t\t\t\tx = canOffs[i];\n\t\t\t\t\telse\n\t\t\t\t\t\ty = canOffs[i];\n\n\t\t\t\t\tval = \"\" + val;\n\n\t\t\t\t\tlet _parts = val.indexOf(\"\\n\") == -1 ? [val] : val.split(/\\n/gm);\n\n\t\t\t\t\tfor (let j = 0; j < _parts.length; j++) {\n\t\t\t\t\t\tlet text = _parts[j];\n\n\t\t\t\t\t\tif (angle) {\n\t\t\t\t\t\t\tctx.save();\n\t\t\t\t\t\t\tctx.translate(x, y + j * lineHeight); // can this be replaced with position math?\n\t\t\t\t\t\t\tctx.rotate(angle); // can this be done once?\n\t\t\t\t\t\t\tctx.fillText(text, 0, 0);\n\t\t\t\t\t\t\tctx.restore();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tctx.fillText(text, x, y + j * lineHeight);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// ticks\n\t\t\tif (ticks.show) {\n\t\t\t\tdrawOrthoLines(\n\t\t\t\t\tcanOffs,\n\t\t\t\t\tticks.filter(self, splits, i, _space, incr),\n\t\t\t\t\tori,\n\t\t\t\t\tside,\n\t\t\t\t\tbasePos,\n\t\t\t\t\ttickSize,\n\t\t\t\t\troundDec(ticks.width * pxRatio, 3),\n\t\t\t\t\tticks.stroke(self, i),\n\t\t\t\t\tticks.dash,\n\t\t\t\t\tticks.cap,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t// grid\n\t\t\tlet grid = axis.grid;\n\n\t\t\tif (grid.show) {\n\t\t\t\tdrawOrthoLines(\n\t\t\t\t\tcanOffs,\n\t\t\t\t\tgrid.filter(self, splits, i, _space, incr),\n\t\t\t\t\tori,\n\t\t\t\t\tori == 0 ? 2 : 1,\n\t\t\t\t\tori == 0 ? plotTop : plotLft,\n\t\t\t\t\tori == 0 ? plotHgt : plotWid,\n\t\t\t\t\troundDec(grid.width * pxRatio, 3),\n\t\t\t\t\tgrid.stroke(self, i),\n\t\t\t\t\tgrid.dash,\n\t\t\t\t\tgrid.cap,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (border.show) {\n\t\t\t\tdrawOrthoLines(\n\t\t\t\t\t[basePos],\n\t\t\t\t\t[1],\n\t\t\t\t\tori == 0 ? 1 : 0,\n\t\t\t\t\tori == 0 ? 1 : 2,\n\t\t\t\t\tori == 1 ? plotTop : plotLft,\n\t\t\t\t\tori == 1 ? plotHgt : plotWid,\n\t\t\t\t\troundDec(border.width * pxRatio, 3),\n\t\t\t\t\tborder.stroke(self, i),\n\t\t\t\t\tborder.dash,\n\t\t\t\t\tborder.cap,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tfire(\"drawAxes\");\n\t}\n\n\tfunction resetYSeries(minMax) {\n\t//\tlog(\"resetYSeries()\", arguments);\n\n\t\tseries.forEach((s, i) => {\n\t\t\tif (i > 0) {\n\t\t\t\ts._paths = null;\n\n\t\t\t\tif (minMax) {\n\t\t\t\t\tif (mode == 1) {\n\t\t\t\t\t\ts.min = null;\n\t\t\t\t\t\ts.max = null;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\ts.facets.forEach(f => {\n\t\t\t\t\t\t\tf.min = null;\n\t\t\t\t\t\t\tf.max = null;\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t}\n\n\tlet queuedCommit = false;\n\n\tfunction commit() {\n\t\tif (!queuedCommit) {\n\t\t\tmicroTask(_commit);\n\t\t\tqueuedCommit = true;\n\t\t}\n\t}\n\n\tfunction _commit() {\n\t//\tlog(\"_commit()\", arguments);\n\n\t\tif (shouldSetScales) {\n\t\t\tsetScales();\n\t\t\tshouldSetScales = false;\n\t\t}\n\n\t\tif (shouldConvergeSize) {\n\t\t\tconvergeSize();\n\t\t\tshouldConvergeSize = false;\n\t\t}\n\n\t\tif (shouldSetSize) {\n\t\t\tsetStylePx(under, LEFT,   plotLftCss);\n\t\t\tsetStylePx(under, TOP,    plotTopCss);\n\t\t\tsetStylePx(under, WIDTH,  plotWidCss);\n\t\t\tsetStylePx(under, HEIGHT, plotHgtCss);\n\n\t\t\tsetStylePx(over, LEFT,    plotLftCss);\n\t\t\tsetStylePx(over, TOP,     plotTopCss);\n\t\t\tsetStylePx(over, WIDTH,   plotWidCss);\n\t\t\tsetStylePx(over, HEIGHT,  plotHgtCss);\n\n\t\t\tsetStylePx(wrap, WIDTH,   fullWidCss);\n\t\t\tsetStylePx(wrap, HEIGHT,  fullHgtCss);\n\n\t\t\t// NOTE: mutating this during print preview in Chrome forces transparent\n\t\t\t// canvas pixels to white, even when followed up with clearRect() below\n\t\t\tcan.width  = round(fullWidCss * pxRatio);\n\t\t\tcan.height = round(fullHgtCss * pxRatio);\n\n\t\t\taxes.forEach(({ _el, _show, _size, _pos, side }) => {\n\t\t\t\tif (_el != null) {\n\t\t\t\t\tif (_show) {\n\t\t\t\t\t\tlet posOffset = (side === 3 || side === 0 ? _size : 0);\n\t\t\t\t\t\tlet isVt = side % 2 == 1;\n\n\t\t\t\t\t\tsetStylePx(_el, isVt ? \"left\"   : \"top\",    _pos - posOffset);\n\t\t\t\t\t\tsetStylePx(_el, isVt ? \"width\"  : \"height\", _size);\n\t\t\t\t\t\tsetStylePx(_el, isVt ? \"top\"    : \"left\",   isVt ? plotTopCss : plotLftCss);\n\t\t\t\t\t\tsetStylePx(_el, isVt ? \"height\" : \"width\",  isVt ? plotHgtCss : plotWidCss);\n\n\t\t\t\t\t\tremClass(_el, OFF);\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\taddClass(_el, OFF);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// invalidate ctx style cache\n\t\t\tctxStroke = ctxFill = ctxWidth = ctxJoin = ctxCap = ctxFont = ctxAlign = ctxBaseline = ctxDash = null;\n\t\t\tctxAlpha = 1;\n\n\t\t\tsyncRect(true);\n\n\t\t\tfire(\"setSize\");\n\n\t\t\tshouldSetSize = false;\n\t\t}\n\n\t\tif (fullWidCss > 0 && fullHgtCss > 0) {\n\t\t\tctx.clearRect(0, 0, can.width, can.height);\n\t\t\tfire(\"drawClear\");\n\t\t\tdrawOrder.forEach(fn => fn());\n\t\t\tfire(\"draw\");\n\t\t}\n\n\t\tif (select.show && shouldSetSelect) {\n\t\t\tsetSelect(select);\n\t\t\tshouldSetSelect = false;\n\t\t}\n\n\t\tif (cursor.show && shouldSetCursor) {\n\t\t\tupdateCursor(null, true, false);\n\t\t\tshouldSetCursor = false;\n\t\t}\n\n\t\tif (legend.show && legend.live && shouldSetLegend) {\n\t\t\tsetLegend();\n\t\t\tshouldSetLegend = false; // redundant currently\n\t\t}\n\n\t\tif (!ready) {\n\t\t\tready = true;\n\t\t\tself.status = 1;\n\n\t\t\tfire(\"ready\");\n\t\t}\n\n\t\tviaAutoScaleX = false;\n\n\t\tqueuedCommit = false;\n\t}\n\n\tself.redraw = (rebuildPaths, recalcAxes) => {\n\t\tshouldConvergeSize = recalcAxes || false;\n\n\t\tif (rebuildPaths !== false)\n\t\t\t_setScale(xScaleKey, scaleX.min, scaleX.max);\n\t\telse\n\t\t\tcommit();\n\t};\n\n\t// redraw() => setScale('x', scales.x.min, scales.x.max);\n\n\t// explicit, never re-ranged (is this actually true? for x and y)\n\tfunction setScale(key, opts) {\n\t\tlet sc = scales[key];\n\n\t\tif (sc.from == null) {\n\t\t\tif (dataLen == 0) {\n\t\t\t\tlet minMax = sc.range(self, opts.min, opts.max, key);\n\t\t\t\topts.min = minMax[0];\n\t\t\t\topts.max = minMax[1];\n\t\t\t}\n\n\t\t\tif (opts.min > opts.max) {\n\t\t\t\tlet _min = opts.min;\n\t\t\t\topts.min = opts.max;\n\t\t\t\topts.max = _min;\n\t\t\t}\n\n\t\t\tif (dataLen > 1 && opts.min != null && opts.max != null && opts.max - opts.min < 1e-16)\n\t\t\t\treturn;\n\n\t\t\tif (key == xScaleKey) {\n\t\t\t\tif (sc.distr == 2 && dataLen > 0) {\n\t\t\t\t\topts.min = closestIdx(opts.min, data[0]);\n\t\t\t\t\topts.max = closestIdx(opts.max, data[0]);\n\n\t\t\t\t\tif (opts.min == opts.max)\n\t\t\t\t\t\topts.max++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t//\tlog(\"setScale()\", arguments);\n\n\t\t\tpendScales[key] = opts;\n\n\t\t\tshouldSetScales = true;\n\t\t\tcommit();\n\t\t}\n\t}\n\n\tself.setScale = setScale;\n\n//\tINTERACTION\n\n\tlet xCursor;\n\tlet yCursor;\n\tlet vCursor;\n\tlet hCursor;\n\n\t// starting position before cursor.move\n\tlet rawMouseLeft0;\n\tlet rawMouseTop0;\n\n\t// starting position\n\tlet mouseLeft0;\n\tlet mouseTop0;\n\n\t// current position before cursor.move\n\tlet rawMouseLeft1;\n\tlet rawMouseTop1;\n\n\t// current position\n\tlet mouseLeft1;\n\tlet mouseTop1;\n\n\tlet dragging = false;\n\n\tconst drag = cursor.drag;\n\n\tlet dragX = drag.x;\n\tlet dragY = drag.y;\n\n\tif (cursor.show) {\n\t\tif (cursor.x)\n\t\t\txCursor = placeDiv(CURSOR_X, over);\n\t\tif (cursor.y)\n\t\t\tyCursor = placeDiv(CURSOR_Y, over);\n\n\t\tif (scaleX.ori == 0) {\n\t\t\tvCursor = xCursor;\n\t\t\thCursor = yCursor;\n\t\t}\n\t\telse {\n\t\t\tvCursor = yCursor;\n\t\t\thCursor = xCursor;\n\t\t}\n\n\t\tmouseLeft1 = cursor.left;\n\t\tmouseTop1 = cursor.top;\n\t}\n\n\tconst select = self.select = assign({\n\t\tshow:   true,\n\t\tover:   true,\n\t\tleft:   0,\n\t\twidth:  0,\n\t\ttop:    0,\n\t\theight: 0,\n\t}, opts.select);\n\n\tconst selectDiv = select.show ? placeDiv(SELECT, select.over ? over : under) : null;\n\n\tfunction setSelect(opts, _fire) {\n\t\tif (select.show) {\n\t\t\tfor (let prop in opts) {\n\t\t\t\tselect[prop] = opts[prop];\n\n\t\t\t\tif (prop in _hideProps)\n\t\t\t\t\tsetStylePx(selectDiv, prop, opts[prop]);\n\t\t\t}\n\n\t\t\t_fire !== false && fire(\"setSelect\");\n\t\t}\n\t}\n\n\tself.setSelect = setSelect;\n\n\tfunction toggleDOM(i, onOff) {\n\t\tlet s = series[i];\n\t\tlet label = showLegend ? legendRows[i] : null;\n\n\t\tif (s.show)\n\t\t\tlabel && remClass(label, OFF);\n\t\telse {\n\t\t\tlabel && addClass(label, OFF);\n\t\t\tcursorPts.length > 1 && elTrans(cursorPts[i], -10, -10, plotWidCss, plotHgtCss);\n\t\t}\n\t}\n\n\tfunction _setScale(key, min, max) {\n\t\tsetScale(key, {min, max});\n\t}\n\n\tfunction setSeries(i, opts, _fire, _pub) {\n\t//\tlog(\"setSeries()\", arguments);\n\n\t\tif (opts.focus != null)\n\t\t\tsetFocus(i);\n\n\t\tif (opts.show != null) {\n\t\t\tseries.forEach((s, si) => {\n\t\t\t\tif (si > 0 && (i == si || i == null)) {\n\t\t\t\t\ts.show = opts.show;\n\t\t\t\t\ttoggleDOM(si, opts.show);\n\n\t\t\t\t\t_setScale(mode == 2 ? s.facets[1].scale : s.scale, null, null);\n\t\t\t\t\tcommit();\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t_fire !== false && fire(\"setSeries\", i, opts);\n\n\t\t_pub && pubSync(\"setSeries\", self, i, opts);\n\t}\n\n\tself.setSeries = setSeries;\n\n\tfunction setBand(bi, opts) {\n\t\tassign(bands[bi], opts);\n\t}\n\n\tfunction addBand(opts, bi) {\n\t\topts.fill = fnOrSelf(opts.fill || null);\n\t\topts.dir = ifNull(opts.dir, -1);\n\t\tbi = bi == null ? bands.length : bi;\n\t\tbands.splice(bi, 0, opts);\n\t}\n\n\tfunction delBand(bi) {\n\t\tif (bi == null)\n\t\t\tbands.length = 0;\n\t\telse\n\t\t\tbands.splice(bi, 1);\n\t}\n\n\tself.addBand = addBand;\n\tself.setBand = setBand;\n\tself.delBand = delBand;\n\n\tfunction setAlpha(i, value) {\n\t\tseries[i].alpha = value;\n\n\t\tif (cursor.show && cursorPts[i])\n\t\t\tcursorPts[i].style.opacity = value;\n\n\t\tif (showLegend && legendRows[i])\n\t\t\tlegendRows[i].style.opacity = value;\n\t}\n\n\t// y-distance\n\tlet closestDist;\n\tlet closestSeries;\n\tlet focusedSeries;\n\tconst FOCUS_TRUE  = {focus: true};\n\n\tfunction setFocus(i) {\n\t\tif (i != focusedSeries) {\n\t\t//\tlog(\"setFocus()\", arguments);\n\n\t\t\tlet allFocused = i == null;\n\n\t\t\tlet _setAlpha = focus.alpha != 1;\n\n\t\t\tseries.forEach((s, i2) => {\n\t\t\t\tlet isFocused = allFocused || i2 == 0 || i2 == i;\n\t\t\t\ts._focus = allFocused ? null : isFocused;\n\t\t\t\t_setAlpha && setAlpha(i2, isFocused ? 1 : focus.alpha);\n\t\t\t});\n\n\t\t\tfocusedSeries = i;\n\t\t\t_setAlpha && commit();\n\t\t}\n\t}\n\n\tif (showLegend && cursorFocus) {\n\t\ton(mouseleave, legendEl, e => {\n\t\t\tif (cursor._lock)\n\t\t\t\treturn;\n\n\t\t\tif (focusedSeries != null)\n\t\t\t\tsetSeries(null, FOCUS_TRUE, true, syncOpts.setSeries);\n\t\t});\n\t}\n\n\tfunction posToVal(pos, scale, can) {\n\t\tlet sc = scales[scale];\n\n\t\tif (can)\n\t\t\tpos = pos / pxRatio - (sc.ori == 1 ? plotTopCss : plotLftCss);\n\n\t\tlet dim = plotWidCss;\n\n\t\tif (sc.ori == 1) {\n\t\t\tdim = plotHgtCss;\n\t\t\tpos = dim - pos;\n\t\t}\n\n\t\tif (sc.dir == -1)\n\t\t\tpos = dim - pos;\n\n\t\tlet _min = sc._min,\n\t\t\t_max = sc._max,\n\t\t\tpct = pos / dim;\n\n\t\tlet sv = _min + (_max - _min) * pct;\n\n\t\tlet distr = sc.distr;\n\n\t\treturn (\n\t\t\tdistr == 3 ? pow(10, sv) :\n\t\t\tdistr == 4 ? sinh(sv, sc.asinh) :\n\t\t\tsv\n\t\t);\n\t}\n\n\tfunction closestIdxFromXpos(pos, can) {\n\t\tlet v = posToVal(pos, xScaleKey, can);\n\t\treturn closestIdx(v, data[0], i0, i1);\n\t}\n\n\tself.valToIdx = val => closestIdx(val, data[0]);\n\tself.posToIdx = closestIdxFromXpos;\n\tself.posToVal = posToVal;\n\tself.valToPos = (val, scale, can) => (\n\t\tscales[scale].ori == 0 ?\n\t\tgetHPos(val, scales[scale],\n\t\t\tcan ? plotWid : plotWidCss,\n\t\t\tcan ? plotLft : 0,\n\t\t) :\n\t\tgetVPos(val, scales[scale],\n\t\t\tcan ? plotHgt : plotHgtCss,\n\t\t\tcan ? plotTop : 0,\n\t\t)\n\t);\n\n\t// defers calling expensive functions\n\tfunction batch(fn) {\n\t\tfn(self);\n\t\tcommit();\n\t}\n\n\tself.batch = batch;\n\n\t(self.setCursor = (opts, _fire, _pub) => {\n\t\tmouseLeft1 = opts.left;\n\t\tmouseTop1 = opts.top;\n\t//\tassign(cursor, opts);\n\t\tupdateCursor(null, _fire, _pub);\n\t});\n\n\tfunction setSelH(off, dim) {\n\t\tsetStylePx(selectDiv, LEFT,  select.left = off);\n\t\tsetStylePx(selectDiv, WIDTH, select.width = dim);\n\t}\n\n\tfunction setSelV(off, dim) {\n\t\tsetStylePx(selectDiv, TOP,    select.top = off);\n\t\tsetStylePx(selectDiv, HEIGHT, select.height = dim);\n\t}\n\n\tlet setSelX = scaleX.ori == 0 ? setSelH : setSelV;\n\tlet setSelY = scaleX.ori == 1 ? setSelH : setSelV;\n\n\tfunction syncLegend() {\n\t\tif (showLegend && legend.live) {\n\t\t\tfor (let i = mode == 2 ? 1 : 0; i < series.length; i++) {\n\t\t\t\tif (i == 0 && multiValLegend)\n\t\t\t\t\tcontinue;\n\n\t\t\t\tlet vals = legend.values[i];\n\n\t\t\t\tlet j = 0;\n\n\t\t\t\tfor (let k in vals)\n\t\t\t\t\tlegendCells[i][j++].firstChild.nodeValue = vals[k];\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction setLegend(opts, _fire) {\n\t\tif (opts != null) {\n\t\t\tif (opts.idxs) {\n\t\t\t\topts.idxs.forEach((didx, sidx) => {\n\t\t\t\t\tactiveIdxs[sidx] = didx;\n\t\t\t\t});\n\t\t\t}\n\t\t\telse if (!isUndef(opts.idx))\n\t\t\t\tactiveIdxs.fill(opts.idx);\n\n\t\t\tlegend.idx = activeIdxs[0];\n\t\t}\n\n\t\tfor (let sidx = 0; sidx < series.length; sidx++) {\n\t\t\tif (sidx > 0 || mode == 1 && !multiValLegend)\n\t\t\t\tsetLegendValues(sidx, activeIdxs[sidx]);\n\t\t}\n\n\t\tif (showLegend && legend.live)\n\t\t\tsyncLegend();\n\n\t\tshouldSetLegend = false;\n\n\t\t_fire !== false && fire(\"setLegend\");\n\t}\n\n\tself.setLegend = setLegend;\n\n\tfunction setLegendValues(sidx, idx) {\n\t\tlet s = series[sidx];\n\t\tlet src = sidx == 0 && xScaleDistr == 2 ? data0 : data[sidx];\n\t\tlet val;\n\n\t\tif (multiValLegend)\n\t\t\tval = s.values(self, sidx, idx) ?? NULL_LEGEND_VALUES;\n\t\telse {\n\t\t\tval = s.value(self, idx == null ? null : src[idx], sidx, idx);\n\t\t\tval = val == null ? NULL_LEGEND_VALUES : {_: val};\n\t\t}\n\n\t\tlegend.values[sidx] = val;\n\t}\n\n\tfunction updateCursor(src, _fire, _pub) {\n\t//\tts == null && log(\"updateCursor()\", arguments);\n\n\t\trawMouseLeft1 = mouseLeft1;\n\t\trawMouseTop1 = mouseTop1;\n\n\t\t[mouseLeft1, mouseTop1] = cursor.move(self, mouseLeft1, mouseTop1);\n\n\t\tif (cursor.show) {\n\t\t\tvCursor && elTrans(vCursor, round(mouseLeft1), 0, plotWidCss, plotHgtCss);\n\t\t\thCursor && elTrans(hCursor, 0, round(mouseTop1), plotWidCss, plotHgtCss);\n\t\t}\n\n\t\tlet idx;\n\n\t\t// when zooming to an x scale range between datapoints the binary search\n\t\t// for nearest min/max indices results in this condition. cheap hack :D\n\t\tlet noDataInRange = i0 > i1; // works for mode 1 only\n\n\t\tclosestDist = inf;\n\n\t\t// TODO: extract\n\t\tlet xDim = scaleX.ori == 0 ? plotWidCss : plotHgtCss;\n\t\tlet yDim = scaleX.ori == 1 ? plotWidCss : plotHgtCss;\n\n\t\t// if cursor hidden, hide points & clear legend vals\n\t\tif (mouseLeft1 < 0 || dataLen == 0 || noDataInRange) {\n\t\t\tidx = null;\n\n\t\t\tfor (let i = 0; i < series.length; i++) {\n\t\t\t\tif (i > 0) {\n\t\t\t\t\tcursorPts.length > 1 && elTrans(cursorPts[i], -10, -10, plotWidCss, plotHgtCss);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (cursorFocus)\n\t\t\t\tsetSeries(null, FOCUS_TRUE, true, src == null && syncOpts.setSeries);\n\n\t\t\tif (legend.live) {\n\t\t\t\tactiveIdxs.fill(idx);\n\t\t\t\tshouldSetLegend = true;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t//\tlet pctY = 1 - (y / rect.height);\n\n\t\t\tlet mouseXPos, valAtPosX, xPos;\n\n\t\t\tif (mode == 1) {\n\t\t\t\tmouseXPos = scaleX.ori == 0 ? mouseLeft1 : mouseTop1;\n\t\t\t\tvalAtPosX = posToVal(mouseXPos, xScaleKey);\n\t\t\t\tidx = closestIdx(valAtPosX, data[0], i0, i1);\n\t\t\t\txPos = valToPosX(data[0][idx], scaleX, xDim, 0);\n\t\t\t}\n\n\t\t\tfor (let i = mode == 2 ? 1 : 0; i < series.length; i++) {\n\t\t\t\tlet s = series[i];\n\n\t\t\t\tlet idx1  = activeIdxs[i];\n\t\t\t\tlet yVal1 = mode == 1 ? data[i][idx1] : data[i][1][idx1];\n\n\t\t\t\tlet idx2  = cursor.dataIdx(self, i, idx, valAtPosX);\n\t\t\t\tlet yVal2 = mode == 1 ? data[i][idx2] : data[i][1][idx2];\n\n\t\t\t\tshouldSetLegend = shouldSetLegend || yVal2 != yVal1 || idx2 != idx1;\n\n\t\t\t\tactiveIdxs[i] = idx2;\n\n\t\t\t\tlet xPos2 = incrRoundUp(idx2 == idx ? xPos : valToPosX(mode == 1 ? data[0][idx2] : data[i][0][idx2], scaleX, xDim, 0), 1);\n\n\t\t\t\tif (i > 0 && s.show) {\n\t\t\t\t\tlet yPos = yVal2 == null ? -10 : incrRoundUp(valToPosY(yVal2, mode == 1 ? scales[s.scale] : scales[s.facets[1].scale], yDim, 0), 1);\n\n\t\t\t\t\tif (cursorFocus && yPos >= 0 && mode == 1) {\n\t\t\t\t\t\tlet dist = abs(yPos - mouseTop1);\n\t\t\t\t\t\tlet bias = focus.bias;\n\n\t\t\t\t\t\tif (bias != 0) {\n\t\t\t\t\t\t\tlet mouseYPos = scaleX.ori == 1 ? mouseLeft1 : mouseTop1;\n\t\t\t\t\t\t\tlet mouseYVal = posToVal(mouseYPos, s.scale);\n\n\t\t\t\t\t\t\tlet seriesYValSign = yVal2     >= 0 ? 1 : -1;\n\t\t\t\t\t\t\tlet mouseYValSign  = mouseYVal >= 0 ? 1 : -1;\n\n\t\t\t\t\t\t\t// with a focus bias, we will never cross zero when prox testing\n\t\t\t\t\t\t\t// it's either closest towards zero, or closest away from zero\n\t\t\t\t\t\t\tif (mouseYValSign == seriesYValSign) {\n\t\t\t\t\t\t\t\tif (\n\t\t\t\t\t\t\t\t\tdist < closestDist\n\t\t\t\t\t\t\t\t\t&& (\n\t\t\t\t\t\t\t\t\t\tmouseYValSign == 1 ?\n\t\t\t\t\t\t\t\t\t\t\t(bias == 1 ? yVal2 >= mouseYVal : yVal2 <= mouseYVal) :  // >= 0\n\t\t\t\t\t\t\t\t\t\t\t(bias == 1 ? yVal2 <= mouseYVal : yVal2 >= mouseYVal)    //  < 0\n\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t) {\n\t\t\t\t\t\t\t\t\tclosestDist = dist;\n\t\t\t\t\t\t\t\t\tclosestSeries = i;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tif (dist < closestDist) {\n\t\t\t\t\t\t\t\tclosestDist = dist;\n\t\t\t\t\t\t\t\tclosestSeries = i;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tlet hPos, vPos;\n\n\t\t\t\t\tif (scaleX.ori == 0) {\n\t\t\t\t\t\thPos = xPos2;\n\t\t\t\t\t\tvPos = yPos;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\thPos = yPos;\n\t\t\t\t\t\tvPos = xPos2;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (shouldSetLegend && cursorPts.length > 1) {\n\t\t\t\t\t\telColor(cursorPts[i], cursor.points.fill(self, i), cursor.points.stroke(self, i));\n\n\t\t\t\t\t\tlet ptWid, ptHgt, ptLft, ptTop,\n\t\t\t\t\t\t\tcentered = true,\n\t\t\t\t\t\t\tgetBBox = cursor.points.bbox;\n\n\t\t\t\t\t\tif (getBBox != null) {\n\t\t\t\t\t\t\tcentered = false;\n\n\t\t\t\t\t\t\tlet bbox = getBBox(self, i);\n\n\t\t\t\t\t\t\tptLft = bbox.left;\n\t\t\t\t\t\t\tptTop = bbox.top;\n\t\t\t\t\t\t\tptWid = bbox.width;\n\t\t\t\t\t\t\tptHgt = bbox.height;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tptLft = hPos;\n\t\t\t\t\t\t\tptTop = vPos;\n\t\t\t\t\t\t\tptWid = ptHgt = cursor.points.size(self, i);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\telSize(cursorPts[i], ptWid, ptHgt, centered);\n\t\t\t\t\t\telTrans(cursorPts[i], ptLft, ptTop, plotWidCss, plotHgtCss);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tcursor.idx = idx;\n\t\tcursor.left = mouseLeft1;\n\t\tcursor.top = mouseTop1;\n\n\t\tif (shouldSetLegend) {\n\t\t\tlegend.idx = idx;\n\t\t\tsetLegend();\n\t\t}\n\n\t\t// nit: cursor.drag.setSelect is assumed always true\n\t\tif (select.show && dragging) {\n\t\t\tif (src != null) {\n\t\t\t\tlet [xKey, yKey] = syncOpts.scales;\n\t\t\t\tlet [matchXKeys, matchYKeys] = syncOpts.match;\n\t\t\t\tlet [xKeySrc, yKeySrc] = src.cursor.sync.scales;\n\n\t\t\t\t// match the dragX/dragY implicitness/explicitness of src\n\t\t\t\tlet sdrag = src.cursor.drag;\n\t\t\t\tdragX = sdrag._x;\n\t\t\t\tdragY = sdrag._y;\n\n\t\t\t\tif (dragX || dragY) {\n\t\t\t\t\tlet { left, top, width, height } = src.select;\n\n\t\t\t\t\tlet sori = src.scales[xKey].ori;\n\t\t\t\t\tlet sPosToVal = src.posToVal;\n\n\t\t\t\t\tlet sOff, sDim, sc, a, b;\n\n\t\t\t\t\tlet matchingX = xKey != null && matchXKeys(xKey, xKeySrc);\n\t\t\t\t\tlet matchingY = yKey != null && matchYKeys(yKey, yKeySrc);\n\n\t\t\t\t\tif (matchingX && dragX) {\n\t\t\t\t\t\tif (sori == 0) {\n\t\t\t\t\t\t\tsOff = left;\n\t\t\t\t\t\t\tsDim = width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tsOff = top;\n\t\t\t\t\t\t\tsDim = height;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsc = scales[xKey];\n\n\t\t\t\t\t\ta = valToPosX(sPosToVal(sOff, xKeySrc),        sc, xDim, 0);\n\t\t\t\t\t\tb = valToPosX(sPosToVal(sOff + sDim, xKeySrc), sc, xDim, 0);\n\n\t\t\t\t\t\tsetSelX(min(a,b), abs(b-a));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tsetSelX(0, xDim);\n\n\t\t\t\t\tif (matchingY && dragY) {\n\t\t\t\t\t\tif (sori == 1) {\n\t\t\t\t\t\t\tsOff = left;\n\t\t\t\t\t\t\tsDim = width;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tsOff = top;\n\t\t\t\t\t\t\tsDim = height;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsc = scales[yKey];\n\n\t\t\t\t\t\ta = valToPosY(sPosToVal(sOff, yKeySrc),        sc, yDim, 0);\n\t\t\t\t\t\tb = valToPosY(sPosToVal(sOff + sDim, yKeySrc), sc, yDim, 0);\n\n\t\t\t\t\t\tsetSelY(min(a,b), abs(b-a));\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t\tsetSelY(0, yDim);\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t\thideSelect();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlet rawDX = abs(rawMouseLeft1 - rawMouseLeft0);\n\t\t\t\tlet rawDY = abs(rawMouseTop1 - rawMouseTop0);\n\n\t\t\t\tif (scaleX.ori == 1) {\n\t\t\t\t\tlet _rawDX = rawDX;\n\t\t\t\t\trawDX = rawDY;\n\t\t\t\t\trawDY = _rawDX;\n\t\t\t\t}\n\n\t\t\t\tdragX = drag.x && rawDX >= drag.dist;\n\t\t\t\tdragY = drag.y && rawDY >= drag.dist;\n\n\t\t\t\tlet uni = drag.uni;\n\n\t\t\t\tif (uni != null) {\n\t\t\t\t\t// only calc drag status if they pass the dist thresh\n\t\t\t\t\tif (dragX && dragY) {\n\t\t\t\t\t\tdragX = rawDX >= uni;\n\t\t\t\t\t\tdragY = rawDY >= uni;\n\n\t\t\t\t\t\t// force unidirectionality when both are under uni limit\n\t\t\t\t\t\tif (!dragX && !dragY) {\n\t\t\t\t\t\t\tif (rawDY > rawDX)\n\t\t\t\t\t\t\t\tdragY = true;\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\tdragX = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse if (drag.x && drag.y && (dragX || dragY))\n\t\t\t\t\t// if omni with no uni then both dragX / dragY should be true if either is true\n\t\t\t\t\tdragX = dragY = true;\n\n\t\t\t\tlet p0, p1;\n\n\t\t\t\tif (dragX) {\n\t\t\t\t\tif (scaleX.ori == 0) {\n\t\t\t\t\t\tp0 = mouseLeft0;\n\t\t\t\t\t\tp1 = mouseLeft1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp0 = mouseTop0;\n\t\t\t\t\t\tp1 = mouseTop1;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetSelX(min(p0, p1), abs(p1 - p0));\n\n\t\t\t\t\tif (!dragY)\n\t\t\t\t\t\tsetSelY(0, yDim);\n\t\t\t\t}\n\n\t\t\t\tif (dragY) {\n\t\t\t\t\tif (scaleX.ori == 1) {\n\t\t\t\t\t\tp0 = mouseLeft0;\n\t\t\t\t\t\tp1 = mouseLeft1;\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tp0 = mouseTop0;\n\t\t\t\t\t\tp1 = mouseTop1;\n\t\t\t\t\t}\n\n\t\t\t\t\tsetSelY(min(p0, p1), abs(p1 - p0));\n\n\t\t\t\t\tif (!dragX)\n\t\t\t\t\t\tsetSelX(0, xDim);\n\t\t\t\t}\n\n\t\t\t\t// the drag didn't pass the dist requirement\n\t\t\t\tif (!dragX && !dragY) {\n\t\t\t\t\tsetSelX(0, 0);\n\t\t\t\t\tsetSelY(0, 0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tdrag._x = dragX;\n\t\tdrag._y = dragY;\n\n\t\tif (src == null) {\n\t\t\tif (_pub) {\n\t\t\t\tif (syncKey != null) {\n\t\t\t\t\tlet [xSyncKey, ySyncKey] = syncOpts.scales;\n\n\t\t\t\t\tsyncOpts.values[0] = xSyncKey != null ? posToVal(scaleX.ori == 0 ? mouseLeft1 : mouseTop1, xSyncKey) : null;\n\t\t\t\t\tsyncOpts.values[1] = ySyncKey != null ? posToVal(scaleX.ori == 1 ? mouseLeft1 : mouseTop1, ySyncKey) : null;\n\t\t\t\t}\n\n\t\t\t\tpubSync(mousemove, self, mouseLeft1, mouseTop1, plotWidCss, plotHgtCss, idx);\n\t\t\t}\n\n\t\t\tif (cursorFocus) {\n\t\t\t\tlet shouldPub = _pub && syncOpts.setSeries;\n\t\t\t\tlet p = focus.prox;\n\n\t\t\t\tif (focusedSeries == null) {\n\t\t\t\t\tif (closestDist <= p)\n\t\t\t\t\t\tsetSeries(closestSeries, FOCUS_TRUE, true, shouldPub);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (closestDist > p)\n\t\t\t\t\t\tsetSeries(null, FOCUS_TRUE, true, shouldPub);\n\t\t\t\t\telse if (closestSeries != focusedSeries)\n\t\t\t\t\t\tsetSeries(closestSeries, FOCUS_TRUE, true, shouldPub);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t_fire !== false && fire(\"setCursor\");\n\t}\n\n\tlet rect = null;\n\n\tfunction syncRect(defer) {\n\t\tif (defer === true)\n\t\t\trect = null;\n\t\telse {\n\t\t\trect = over.getBoundingClientRect();\n\t\t\tfire(\"syncRect\", rect);\n\t\t}\n\t}\n\n\tfunction mouseMove(e, src, _l, _t, _w, _h, _i) {\n\t\tif (cursor._lock)\n\t\t\treturn;\n\n\t\t// Chrome on Windows has a bug which triggers a stray mousemove event after an initial mousedown event\n\t\t// when clicking into a plot as part of re-focusing the browser window.\n\t\t// we gotta ignore it to avoid triggering a phantom drag / setSelect\n\t\t// However, on touch-only devices Chrome-based browsers trigger a 0-distance mousemove before mousedown\n\t\t// so we don't ignore it when mousedown has set the dragging flag\n\t\tif (dragging && e != null && e.movementX == 0 && e.movementY == 0)\n\t\t\treturn;\n\n\t\tcacheMouse(e, src, _l, _t, _w, _h, _i, false, e != null);\n\n\t\tif (e != null)\n\t\t\tupdateCursor(null, true, true);\n\t\telse\n\t\t\tupdateCursor(src, true, false);\n\t}\n\n\tfunction cacheMouse(e, src, _l, _t, _w, _h, _i, initial, snap) {\n\t\tif (rect == null)\n\t\t\tsyncRect(false);\n\n\t\tif (e != null) {\n\t\t\t_l = e.clientX - rect.left;\n\t\t\t_t = e.clientY - rect.top;\n\t\t}\n\t\telse {\n\t\t\tif (_l < 0 || _t < 0) {\n\t\t\t\tmouseLeft1 = -10;\n\t\t\t\tmouseTop1 = -10;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlet [xKey, yKey] = syncOpts.scales;\n\n\t\t\tlet syncOptsSrc = src.cursor.sync;\n\t\t\tlet [xValSrc, yValSrc] = syncOptsSrc.values;\n\t\t\tlet [xKeySrc, yKeySrc] = syncOptsSrc.scales;\n\t\t\tlet [matchXKeys, matchYKeys] = syncOpts.match;\n\n\t\t\tlet rotSrc = src.axes[0].side % 2 == 1;\n\n\t\t\tlet xDim = scaleX.ori == 0 ? plotWidCss : plotHgtCss,\n\t\t\t\tyDim = scaleX.ori == 1 ? plotWidCss : plotHgtCss,\n\t\t\t\t_xDim = rotSrc ? _h : _w,\n\t\t\t\t_yDim = rotSrc ? _w : _h,\n\t\t\t\t_xPos = rotSrc ? _t : _l,\n\t\t\t\t_yPos = rotSrc ? _l : _t;\n\n\t\t\tif (xKeySrc != null)\n\t\t\t\t_l = matchXKeys(xKey, xKeySrc) ? getPos(xValSrc, scales[xKey], xDim, 0) : -10;\n\t\t\telse\n\t\t\t\t_l = xDim * (_xPos/_xDim);\n\n\t\t\tif (yKeySrc != null)\n\t\t\t\t_t = matchYKeys(yKey, yKeySrc) ? getPos(yValSrc, scales[yKey], yDim, 0) : -10;\n\t\t\telse\n\t\t\t\t_t = yDim * (_yPos/_yDim);\n\n\t\t\tif (scaleX.ori == 1) {\n\t\t\t\tlet __l = _l;\n\t\t\t\t_l = _t;\n\t\t\t\t_t = __l;\n\t\t\t}\n\t\t}\n\n\t\tif (snap) {\n\t\t\tif (_l <= 1 || _l >= plotWidCss - 1)\n\t\t\t\t_l = incrRound(_l, plotWidCss);\n\n\t\t\tif (_t <= 1 || _t >= plotHgtCss - 1)\n\t\t\t\t_t = incrRound(_t, plotHgtCss);\n\t\t}\n\n\t\tif (initial) {\n\t\t\trawMouseLeft0 = _l;\n\t\t\trawMouseTop0 = _t;\n\n\t\t\t[mouseLeft0, mouseTop0] = cursor.move(self, _l, _t);\n\t\t}\n\t\telse {\n\t\t\tmouseLeft1 = _l;\n\t\t\tmouseTop1 = _t;\n\t\t}\n\t}\n\n\tconst _hideProps = {\n\t\twidth: 0,\n\t\theight: 0,\n\t\tleft: 0,\n\t\ttop: 0,\n\t};\n\n\tfunction hideSelect() {\n\t\tsetSelect(_hideProps, false);\n\t}\n\n\tfunction mouseDown(e, src, _l, _t, _w, _h, _i) {\n\t\tdragging = true;\n\t\tdragX = dragY = drag._x = drag._y = false;\n\n\t\tcacheMouse(e, src, _l, _t, _w, _h, _i, true, false);\n\n\t\tif (e != null) {\n\t\t\tonMouse(mouseup, doc, mouseUp);\n\t\t\tpubSync(mousedown, self, mouseLeft0, mouseTop0, plotWidCss, plotHgtCss, null);\n\t\t}\n\t}\n\n\tfunction mouseUp(e, src, _l, _t, _w, _h, _i) {\n\t\tdragging = drag._x = drag._y = false;\n\n\t\tcacheMouse(e, src, _l, _t, _w, _h, _i, false, true);\n\n\t\tlet { left, top, width, height } = select;\n\n\t\tlet hasSelect = width > 0 || height > 0;\n\n\t\thasSelect && setSelect(select);\n\n\t\tif (drag.setScale && hasSelect) {\n\t\t//\tif (syncKey != null) {\n\t\t//\t\tdragX = drag.x;\n\t\t//\t\tdragY = drag.y;\n\t\t//\t}\n\n\t\t\tlet xOff = left,\n\t\t\t\txDim = width,\n\t\t\t\tyOff = top,\n\t\t\t\tyDim = height;\n\n\t\t\tif (scaleX.ori == 1) {\n\t\t\t\txOff = top,\n\t\t\t\txDim = height,\n\t\t\t\tyOff = left,\n\t\t\t\tyDim = width;\n\t\t\t}\n\n\t\t\tif (dragX) {\n\t\t\t\t_setScale(xScaleKey,\n\t\t\t\t\tposToVal(xOff, xScaleKey),\n\t\t\t\t\tposToVal(xOff + xDim, xScaleKey)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tif (dragY) {\n\t\t\t\tfor (let k in scales) {\n\t\t\t\t\tlet sc = scales[k];\n\n\t\t\t\t\tif (k != xScaleKey && sc.from == null && sc.min != inf) {\n\t\t\t\t\t\t_setScale(k,\n\t\t\t\t\t\t\tposToVal(yOff + yDim, k),\n\t\t\t\t\t\t\tposToVal(yOff, k)\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thideSelect();\n\t\t}\n\t\telse if (cursor.lock) {\n\t\t\tcursor._lock = !cursor._lock;\n\n\t\t\tif (!cursor._lock)\n\t\t\t\tupdateCursor(null, true, false);\n\t\t}\n\n\t\tif (e != null) {\n\t\t\toffMouse(mouseup, doc);\n\t\t\tpubSync(mouseup, self, mouseLeft1, mouseTop1, plotWidCss, plotHgtCss, null);\n\t\t}\n\t}\n\n\tfunction mouseLeave(e, src, _l, _t, _w, _h, _i) {\n\t\tif (!cursor._lock) {\n\t\t\tlet _dragging = dragging;\n\n\t\t\tif (dragging) {\n\t\t\t\t// handle case when mousemove aren't fired all the way to edges by browser\n\t\t\t\tlet snapH = true;\n\t\t\t\tlet snapV = true;\n\t\t\t\tlet snapProx = 10;\n\n\t\t\t\tlet dragH, dragV;\n\n\t\t\t\tif (scaleX.ori == 0) {\n\t\t\t\t\tdragH = dragX;\n\t\t\t\t\tdragV = dragY;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tdragH = dragY;\n\t\t\t\t\tdragV = dragX;\n\t\t\t\t}\n\n\t\t\t\tif (dragH && dragV) {\n\t\t\t\t\t// maybe omni corner snap\n\t\t\t\t\tsnapH = mouseLeft1 <= snapProx || mouseLeft1 >= plotWidCss - snapProx;\n\t\t\t\t\tsnapV = mouseTop1  <= snapProx || mouseTop1  >= plotHgtCss - snapProx;\n\t\t\t\t}\n\n\t\t\t\tif (dragH && snapH)\n\t\t\t\t\tmouseLeft1 = mouseLeft1 < mouseLeft0 ? 0 : plotWidCss;\n\n\t\t\t\tif (dragV && snapV)\n\t\t\t\t\tmouseTop1 = mouseTop1 < mouseTop0 ? 0 : plotHgtCss;\n\n\t\t\t\tupdateCursor(null, true, true);\n\n\t\t\t\tdragging = false;\n\t\t\t}\n\n\t\t\tmouseLeft1 = -10;\n\t\t\tmouseTop1 = -10;\n\n\t\t\t// passing a non-null timestamp to force sync/mousemove event\n\t\t\tupdateCursor(null, true, true);\n\n\t\t\tif (_dragging)\n\t\t\t\tdragging = _dragging;\n\t\t}\n\t}\n\n\tfunction dblClick(e, src, _l, _t, _w, _h, _i) {\n\t\tautoScaleX();\n\n\t\thideSelect();\n\n\t\tif (e != null)\n\t\t\tpubSync(dblclick, self, mouseLeft1, mouseTop1, plotWidCss, plotHgtCss, null);\n\t}\n\n\tfunction syncPxRatio() {\n\t\taxes.forEach(syncFontSize);\n\t\t_setSize(self.width, self.height, true);\n\t}\n\n\ton(dppxchange, win, syncPxRatio);\n\n\t// internal pub/sub\n\tconst events = {};\n\n\tevents.mousedown = mouseDown;\n\tevents.mousemove = mouseMove;\n\tevents.mouseup = mouseUp;\n\tevents.dblclick = dblClick;\n\tevents[\"setSeries\"] = (e, src, idx, opts) => {\n\t\tsetSeries(idx, opts, true, false);\n\t};\n\n\tif (cursor.show) {\n\t\tonMouse(mousedown,  over, mouseDown);\n\t\tonMouse(mousemove,  over, mouseMove);\n\t\tonMouse(mouseenter, over, syncRect);\n\t\tonMouse(mouseleave, over, mouseLeave);\n\n\t\tonMouse(dblclick, over, dblClick);\n\n\t\tcursorPlots.add(self);\n\n\t\tself.syncRect = syncRect;\n\t}\n\n\t// external on/off\n\tconst hooks = self.hooks = opts.hooks || {};\n\n\tfunction fire(evName, a1, a2) {\n\t\tif (evName in hooks) {\n\t\t\thooks[evName].forEach(fn => {\n\t\t\t\tfn.call(null, self, a1, a2);\n\t\t\t});\n\t\t}\n\t}\n\n\t(opts.plugins || []).forEach(p => {\n\t\tfor (let evName in p.hooks)\n\t\t\thooks[evName] = (hooks[evName] || []).concat(p.hooks[evName]);\n\t});\n\n\tconst syncOpts = assign({\n\t\tkey: null,\n\t\tsetSeries: false,\n\t\tfilters: {\n\t\t\tpub: retTrue,\n\t\t\tsub: retTrue,\n\t\t},\n\t\tscales: [xScaleKey, series[1] ? series[1].scale : null],\n\t\tmatch: [retEq, retEq],\n\t\tvalues: [null, null],\n\t}, cursor.sync);\n\n\t(cursor.sync = syncOpts);\n\n\tconst syncKey = syncOpts.key;\n\n\tconst sync = _sync(syncKey);\n\n\tfunction pubSync(type, src, x, y, w, h, i) {\n\t\tif (syncOpts.filters.pub(type, src, x, y, w, h, i))\n\t\t\tsync.pub(type, src, x, y, w, h, i);\n\t}\n\n\tsync.sub(self);\n\n\tfunction pub(type, src, x, y, w, h, i) {\n\t\tif (syncOpts.filters.sub(type, src, x, y, w, h, i))\n\t\t\tevents[type](null, src, x, y, w, h, i);\n\t}\n\n\t(self.pub = pub);\n\n\tfunction destroy() {\n\t\tsync.unsub(self);\n\t\tcursorPlots.delete(self);\n\t\tmouseListeners.clear();\n\t\toff(dppxchange, win, syncPxRatio);\n\t\troot.remove();\n\t\tlegendEl?.remove(); // in case mounted outside of root\n\t\tfire(\"destroy\");\n\t}\n\n\tself.destroy = destroy;\n\n\tfunction _init() {\n\t\tfire(\"init\", opts, data);\n\n\t\tsetData(data || opts.data, false);\n\n\t\tif (pendScales[xScaleKey])\n\t\t\tsetScale(xScaleKey, pendScales[xScaleKey]);\n\t\telse\n\t\t\tautoScaleX();\n\n\t\tshouldSetSelect = select.show;\n\t\tshouldSetCursor = shouldSetLegend = true;\n\n\t\t_setSize(opts.width, opts.height);\n\t}\n\n\tseries.forEach(initSeries);\n\n\taxes.forEach(initAxis);\n\n\tif (then) {\n\t\tif (then instanceof HTMLElement) {\n\t\t\tthen.appendChild(root);\n\t\t\t_init();\n\t\t}\n\t\telse\n\t\t\tthen(self, _init);\n\t}\n\telse\n\t\t_init();\n\n\treturn self;\n}\n\nuPlot.assign = assign;\nuPlot.fmtNum = fmtNum;\nuPlot.rangeNum = rangeNum;\nuPlot.rangeLog = rangeLog;\nuPlot.rangeAsinh = rangeAsinh;\nuPlot.orient   = orient;\nuPlot.pxRatio = pxRatio;\n\n{\n\tuPlot.join = join;\n}\n\n{\n\tuPlot.fmtDate = fmtDate;\n\tuPlot.tzDate  = tzDate;\n}\n\n{\n\tuPlot.sync = _sync;\n}\n\n{\n\tuPlot.addGap = addGap;\n\tuPlot.clipGaps = clipGaps;\n\n\tlet paths = uPlot.paths = {\n\t\tpoints,\n\t};\n\n\t(paths.linear  = linear);\n\t(paths.stepped = stepped);\n\t(paths.bars    = bars);\n\t(paths.spline  = monotoneCubic);\n}\n\nexport { uPlot as default };\n", "import uPlot from 'uplot'\n\nlet chart = null;\n\nfunction paths(u, sidx, i0, i1) {\n  const s = u.series[sidx];\n  const xdata = u.data[0];\n  const ydata = u.data[sidx];\n  const scaleX = 'x';\n  const scaleY = s.scale;\n\n  const stroke = new Path2D();\n\n  const x_width = Math.abs((u.valToPos(xdata[0], scaleX, true) - u.valToPos(xdata[1], scaleX, true)) / 2);\n\n  stroke.moveTo(\n    Math.round(u.valToPos(xdata[0], scaleX, true)),\n    Math.round(u.valToPos(ydata[0], scaleY, true))\n  );\n\n  for (let i = i0; i < i1; i++) {\n    let x0 = Math.round(u.valToPos(xdata[i], scaleX, true));\n    let y0 = Math.round(u.valToPos(ydata[i], scaleY, true));\n    let x1 = Math.round(u.valToPos(xdata[i + 1], scaleX, true));\n    let y1 = Math.round(u.valToPos(ydata[i + 1], scaleY, true));\n\n    stroke.lineTo(x0 - x_width, y0);\n    stroke.lineTo(x1 - x_width, y0);\n\n    if (i == i1 - 1) {\n      stroke.lineTo(x1 - x_width, y1);\n      stroke.lineTo(x1, y1);\n    }\n  }\n\n  const fill = new Path2D(stroke);\n\n  let minY = Math.round(u.valToPos(u.scales[scaleY].min, scaleY, true));\n  let minX = Math.round(u.valToPos(u.scales[scaleX].min, scaleX, true));\n  let maxX = Math.round(u.valToPos(u.scales[scaleX].max, scaleX, true));\n\n  fill.lineTo(maxX, minY);\n  fill.lineTo(minX, minY);\n\n  return {\n    stroke,\n    fill,\n  };\n}\n\nfunction safe_to_fixed(number, decimals) {\n  return number && number.toFixed(decimals)\n}\n\nfunction make_opts(parent, scale) {\n  let rect = { width: parent.clientWidth, height: 600 };\n\n  let scaler = null;\n  if (scale == \"Linear\") {\n    scaler = (x) => x && x\n  } else if (scale == \"Log10\") {\n    scaler = (x) => x && Math.pow(10, x)\n  } else if (scale == \"Log2\") {\n    scaler = (x) => x && Math.pow(2, x)\n  }\n\n  return {\n    id: parent.id + \"-chart\",\n    width: rect.width,\n    height: rect.height,\n    labelSize: 10,\n    labelFont: \"bold 8px Arial\",\n    ticks: { show: false },\n    points: { show: false },\n    font: \"8px Arial\",\n    padding: [null, 30, null, 30],\n    series: [\n      { value: '{HH}:{mm}:{ss}' },\n      {\n        label: \"P99\",\n        stroke: \"rgb(155, 214, 206)\",\n        value: (self, rawValue) => safe_to_fixed(scaler(rawValue), 3) + \"ms\",\n        fill: \"rgb(155, 214, 206, 0.5 )\",\n        paths: paths,\n        scale: \"ms\"\n      },\n      {\n        label: \"P90\",\n        stroke: \"rgb(79, 169, 184)\",\n        value: (self, rawValue) => safe_to_fixed(scaler(rawValue), 3) + \"ms\",\n        fill: \"rgb(79, 169, 184, 0.5)\",\n        paths: paths,\n        scale: \"ms\"\n      },\n      {\n        label: \"P50\",\n        stroke: \"rgb(2, 88, 115)\",\n        value: (self, rawValue) => safe_to_fixed(scaler(rawValue), 3) + \"ms\",\n        fill: \"rgb(2, 88, 115, 0.5)\",\n        paths: paths,\n        scale: \"ms\"\n      },\n      {\n        label: \"count\",\n        stroke: \"rgb(30, 30, 30)\",\n        value: (self, rawValue) => scaler(rawValue) + \"cps\",\n        scale: \"calls\"\n      }\n    ],\n    axes: [\n      {\n        values: [\n          [1, \"{HH}:{mm}:{ss}\", null, null, null, null, null, null, 1],]\n      },\n      {\n        scale: \"ms\",\n        grid: { show: false },\n        values: (u, vals, space) => vals.map((val) => safe_to_fixed(scaler(val), 3) + \"ms\")\n      },\n      {\n        side: 1,\n        values: (u, vals, space) => vals.map((val) => safe_to_fixed(scaler(val), 1) + \" calls\"),\n        scale: \"calls\",\n        grid: { show: false },\n      },\n    ]\n  };\n}\n\nexport class HistoChart {\n  constructor(chartEl, data, scale) {\n    let opts = make_opts(chartEl, scale)\n    this.uplotChart = new uPlot(opts, data, chartEl);\n  }\n\n  updateData(quantile_data, scale) {\n    this.uplotChart.setData(quantile_data, scale)\n  }\n}\n\nlet scale = \"\";\n\nexport const ChartData = {\n  mounted() {\n    let chartEl = this.el.parentElement.querySelector('.chart');\n    scale = JSON.parse(chartEl.dataset.scale);\n    let quantile_data = JSON.parse(chartEl.dataset.quantile);\n    this.chart = new HistoChart(chartEl, quantile_data, scale);\n  },\n  updated() {\n    let chartEl = this.el.parentElement.querySelector('.chart');\n    let new_scale = JSON.parse(chartEl.dataset.scale);\n\n    if (scale == new_scale) {\n      let quantile_data = JSON.parse(chartEl.dataset.quantile);\n      this.chart.updateData(quantile_data, scale);\n    } else {\n      this.mounted();\n    }\n  }\n}"],
  "mappings": "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",
  "names": ["window", "document", "topbar", "min", "max", "_", "tzDate", "fmtDate", "s", "dataIdx", "scale", "gaps", "rect", "w", "points", "u", "seriesIdx", "size", "font", "off", "key", "self", "i", "opts", "sidesWithAxes", "join", "facet", "data", "xScaleKey", "idxs", "strokePath", "strokeStyle", "fillPath", "fillStyle", "shiftAmt", "ticks", "border", "grid", "can", "paths", "scale", "rect", "topbar"]
}
